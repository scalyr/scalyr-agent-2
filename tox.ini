[tox]
envlist = lint,py{2.7}-unit-tests
skipsdist = true
# NOTE: We pass the TERM env to preserve colors
passenv = TERM XDG_CACHE_HOME

[testenv]
basepython =
    {py2.7-unit-tests,py2.7-smoke-tests,coverage}: python2.7
    {py3.5-unit-tests,py3.5-smoke-tests}: python3.5
    {py3.6-unit-tests,py3.6-smoke-tests,lint,black,modernize,flake8,pylint,mypy,generate-monitor-docs}: python3.6
    {lint,black,modernize,flake8,pylint,mypy}: {env:LINT_PYTHON_BINARY}
    {py3.7-unit-tests,py3.7-smoke-tests}: python3.7
    {py3.8-unit-tests,py3.8-smoke-tests}: python3.8
setenv =
  LINT_FILES_TO_CHECK={env:LINT_FILES_TO_CHECK:*.py scripts/*.py benchmarks/scripts/*.py tests/ pylint_plugins/*.py .circleci/*.py .circleci/modernize/ scalyr_agent/ scalyr_agent/third_party/tcollector/}
  # Which Python binary to use for various lint targets
  LINT_PYTHON_BINARY={env:LINT_PYTHON_BINARY:python3.6}
  PYTHONPATH={toxinidir}
install_command = pip install -U --force-reinstall {opts} {packages}
deps =
    -r dev-requirements.txt
whitelist_externals =
    rm
    bash
commands =
    # NOTE: We run memory leak tests separately so they run in a separate
    # process and are isolated from other tests
    py.test scalyr_agent/tests scalyr_agent/builtin_monitors/tests -vv --durations=5 -m "not memory_leak"
    py.test scalyr_agent/tests/test_memory_leaks.py -vv --durations=5

# Target which generates documentation for all the monitors
[testenv:generate-monitor-docs]
deps =
    -r dev-requirements.txt
whitelist_externals =
    bash
commands =
    bash -c "scripts/generate-docs-for-all-monitors.sh"

# NOTE: Older version of tox which still supports Python 2.6 doesn't support installing
# requirements from a file so we need to declare them inline
# In addition to that, we need to use older versions of some of the libraries
# (importlib, pytest, etc.)
# We can get rid of this once we drop Python 2.6 support.
[testenv:py2.6-unit-tests]
basepython = python2.6
install_command = pip install -U --force-reinstall {opts} {packages}
deps = -rpy26-unit-tests-requirements.txt
commands =
    py.test scalyr_agent/tests scalyr_agent/builtin_monitors/tests -vv --durations=5 -m "not memory_leak"

# Lint target which runs all the linting tools such as black, modernize, pylint, flake8, mypy, etc.
# NOTE: We use bash -c since we don't want tox to quote all the arguments, we want globs to
# be expaded
# NOTE: If you update any of the lint targets or the lint target itself, make sure you also update
# corresponding pre commit hook configuration in .pre-commit-config.yaml
[testenv:lint]
basepython = {env:LINT_PYTHON_BINARY}
deps =
    -r dev-requirements.txt
    -r lint-requirements.txt
    -r benchmarks/scripts/requirements.txt
    -r tests/ami/requirements.txt
commands =
    bash -c 'black --check --config pyproject.toml {env:LINT_FILES_TO_CHECK}'
    python .circleci/modernize/modernize.py -j 2
    bash -c 'flake8 --config lint-configs/python/.flake8 {env:LINT_FILES_TO_CHECK}'
    bash -c 'pylint -E --rcfile=./lint-configs/python/.pylintrc --load-plugins pylint_plugins.bundled_imports_checker {env:LINT_FILES_TO_CHECK}'
    bash -c 'mypy --pretty --no-incremental --config-file ./lint-configs/python/mypy.ini {env:LINT_FILES_TO_CHECK}'

[testenv:black]
basepython = {env:LINT_PYTHON_BINARY}
deps =
    -r dev-requirements.txt
    -r lint-requirements.txt
    -r benchmarks/scripts/requirements.txt
commands =
    bash -c 'black --check --config pyproject.toml {env:LINT_FILES_TO_CHECK}'

[testenv:modernize]
basepython = {env:LINT_PYTHON_BINARY}
deps =
    -r dev-requirements.txt
    -r lint-requirements.txt
    -r benchmarks/scripts/requirements.txt
commands =
    python .circleci/modernize/modernize.py -j 2

[testenv:flake8]
basepython = {env:LINT_PYTHON_BINARY}
deps =
    -r dev-requirements.txt
    -r lint-requirements.txt
    -r benchmarks/scripts/requirements.txt
commands =
    bash -c 'flake8 --config lint-configs/python/.flake8 {env:LINT_FILES_TO_CHECK}'

[testenv:pylint]
basepython = {env:LINT_PYTHON_BINARY}
deps =
    -r dev-requirements.txt
    -r lint-requirements.txt
    -r benchmarks/scripts/requirements.txt
commands =
    bash -c 'pylint -E --rcfile=./lint-configs/python/.pylintrc --load-plugins pylint_plugins.bundled_imports_checker {env:LINT_FILES_TO_CHECK}'

[testenv:mypy]
basepython = {env:LINT_PYTHON_BINARY}
deps =
    -r dev-requirements.txt
    -r lint-requirements.txt
    -r benchmarks/scripts/requirements.txt
commands =
    bash -c 'mypy --pretty --no-incremental --config-file ./lint-configs/python/mypy.ini {env:LINT_FILES_TO_CHECK}'

# TODO: Once we make more progress, set coverage % threshold and fail a build if it's not reached
[testenv:coverage]
commands =
    rm -f .coverage
    py.test  scalyr_agent/tests scalyr_agent/builtin_monitors/tests -m "not memory_leak" --cov=scalyr_agent --cov=tests/

# Smoke tests related targets
[testenv:py2.6-smoke-tests]
passenv =
    SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME
basepython = python2.6
install_command = pip install -U --force-reinstall {opts} {packages}
deps = -rpy26-unit-tests-requirements.txt
commands =
    py.test tests/smoke_tests/standalone_test.py -s -vv --durations=5

[testenv:py2.7-smoke-tests]
passenv =
    SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME
commands =
    py.test tests/smoke_tests/standalone_test.py -s -vv --durations=5

[testenv:py3.5-smoke-tests]
passenv =
    SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME
commands =
    py.test tests/smoke_tests/standalone_test.py -s -vv --durations=5

[testenv:py3.6-smoke-tests]
passenv =
    SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME
commands =
    py.test tests/smoke_tests/standalone_test.py -s -vv --durations=5

[testenv:py3.7-smoke-tests]
passenv =
    SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME
commands =
    py.test tests/smoke_tests/standalone_test.py -s -vv --durations=5

[testenv:py3.8-smoke-tests]
passenv =
    SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME
commands =
    py.test tests/smoke_tests/standalone_test.py -s -vv --durations=5

# Package smoke tests related targets
[testenv:agent_package_smoke_test_amazonlinux_python2]
basepython = python3.6
passenv =
    TERM SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY
commands =
    py.test tests/smoke_tests/package_test.py::test_smoke_package_rpm_python2 -s -vv --durations=5 {posargs}

[testenv:agent_package_smoke_test_amazonlinux_python3]
basepython = python3.6
passenv =
    TERM SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY
commands =
    py.test tests/smoke_tests/package_test.py::test_smoke_package_rpm_python3 -s -vv --durations=5 {posargs}

[testenv:agent_package_smoke_test_ubuntu_python2]
basepython = python3.6
passenv =
    TERM SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY
commands =
    py.test tests/smoke_tests/package_test.py::test_smoke_package_deb_python2 -s -vv --durations=5 {posargs}

[testenv:agent_package_smoke_test_ubuntu_python3]
basepython = python3.6
passenv =
    TERM SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY
commands =
    py.test tests/smoke_tests/package_test.py::test_smoke_package_deb_python3 -s -vv --durations=5 {posargs}

[testenv:agent_distributions_tests_ubuntu1604]
basepython = python3.6
passenv =
    TERM SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY
commands =
    # NOTE: We use short traceback formatting since we run py.test inside py.test which results in hard to read output
    py.test tests/distribution/python_version_change_tests/ubuntu1604_test.py -s -vv --tb=short --durations=5 {posargs}

[testenv:agent_distributions_tests_ubuntu1804]
basepython = python3.6
passenv =
    TERM SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY
commands =
    # NOTE: We use short traceback formatting since we run py.test inside py.test which results in hard to read output
    py.test tests/distribution/python_version_change_tests/ubuntu1804_test.py -s -vv --tb=short --durations=5 {posargs}

[testenv:agent_distributions_tests_amazonlinux2]
basepython = python3.6
passenv =
    TERM SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY
commands =
    # NOTE: We use short traceback formatting since we run py.test inside py.test which results in hard to read output
    py.test tests/distribution/python_version_change_tests/amazonlinux2_test.py -s -vv --tb=short --durations=5 {posargs}

[testenv:agent_distributions_tests_centos6]
basepython = python3.6
passenv =
    TERM SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY
commands =
    # NOTE: We use short traceback formatting since we run py.test inside py.test which results in hard to read output
    py.test tests/distribution/python_version_change_tests/centos6_test.py -s -vv --tb=short --durations=5 {posargs}

[testenv:agent_distributions_tests_centos7]
basepython = python3.6
passenv =
    TERM SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY
commands =
    # NOTE: We use short traceback formatting since we run py.test inside py.test which results in hard to read output
    py.test tests/distribution/python_version_change_tests/centos7_test.py -s -vv --tb=short --durations=5 {posargs}

[testenv:agent_distributions_tests_centos8]
basepython = python3.6
passenv =
    TERM SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY
commands =
    # NOTE: We use short traceback formatting since we run py.test inside py.test which results in hard to read output
    py.test tests/distribution/python_version_change_tests/centos8_test.py -s -vv --tb=short --durations=5 {posargs}

[testenv:agent_deb_package]
basepython = python3.6
passenv =
    TERM SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY
commands =
    py.test tests/distribution/deb_package.py -s -vv --tb=short --durations=5 {posargs}

[testenv:agent_rpm_package]
basepython = python3.6
passenv =
    TERM SCALYR_API_KEY READ_API_KEY SCALYR_SERVER AGENT_HOST_NAME DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY
commands =
    py.test tests/distribution/rpm_package.py -s -vv --tb=short --durations=5 {posargs}
