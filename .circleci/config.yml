# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.1/language-python/ for more details

master_only: &master_only
  filters:
    branches:
      only:
        - master
        - release_performance_tracking

version: 2.1
commands:
  codespeed_agent_process_benchmark:
    description: "A base command which runs CodeSpeed agent process level benchmarks"
    parameters:
      codespeed_executable:
        description: "CodeSpeed executable name."
        type: string
      codespeed_environment:
        description: "CodeSpeed environment name."
        type: string
        default: "Circle CI Docker Executor Medium Size"
      agent_config:
        description: "Path to the agent config file to use."
        type: string
      run_time:
        description: "How long to run the capture for (in seconds)."
        type: integer
        default: 120
      capture_interval:
        description: "How often to capture agent process level metrics during the process run time (in seconds)."
        type: integer
        default: 5
      agent_pre_run_command:
        description: "Optional bash command / script to run before starting the agent and the metrics capture script."
        type: string
        default: ""
      agent_post_run_command:
        description: "Optional bash command / script to run after starting the agent and the metrics capture script."
        type: string
        default: ""
      capture_line_counts:
        description: "True to submit log line counts for each log level to CodeSpeed."
        type: boolean
        default: false
      cache_key_name:
        description: "Circle CI cache key name"
        type: string
        default: "Circle CI cache key name"
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-<< parameters.cache_key_name >>-venv-{{ checksum "benchmarks/scripts/requirements.txt" }}
      - run:
          name: Install Dependencies
          command: |
            pip install --user -r benchmarks/scripts/requirements.txt
            # Workaround for issue with cffi library on the system using
            # different version than the one which is bundled with the agent
            pip install --user "cffi==1.12.3"
      - run:
          name: Run Agent And Capture Resource Utilization
          # NOTE: The following variables are specified in the Circle CI WebUI
          # and are handles as secrets: CODESPEED_AUTH
          environment:
            CODESPEED_URL: "https://scalyr-agent-codespeed.herokuapp.com/"
            CODESPEED_PROJECT: "scalyr-agent-2"
            CODESPEED_EXECUTABLE: "<< parameters.codespeed_executable >>"
            CODESPEED_ENVIRONMENT: "<< parameters.codespeed_environment >>"
            CODESPEED_BRANCH: "${CIRCLE_BRANCH}"
            # NOTE: "idle" agent process (which monitors no logs but just runs the linux process
            # monitor for the agent process) should stabilize in a couple of minutes so it makes
            # no sense to run that benchmark longer.
            RUN_TIME: << parameters.run_time >>
            CAPTURE_INTERVAL: << parameters.capture_interval >>
            AGENT_CONFIG_FILE: "<< parameters.agent_config >>"
          command: |
            # Create directories which are needed by the agent process
            mkdir -p ~/scalyr-agent-dev/{log,config,data}

            # NOTE: We explicitly specify a commit date to avoid CodeSpeed from
            # late setting the actual date once it fetches all the commits for a
            # branch / revision
            export TZ=UTC
            export COMMIT_DATE=$(git show --quiet --date='format-local:%Y-%m-%d %H:%M:%S' --format="%cd" ${CIRCLE_SHA1})

            # Run any pre agent run script (if defined)
            if [ ! -z "<< parameters.agent_pre_run_command >>" ]; then
                echo "Running agent pre run command..."
                << parameters.agent_pre_run_command >>
            fi

            # Run the agent process and capture the metrics
            ./benchmarks/scripts/start-agent-and-capture-metrics.sh "${CIRCLE_SHA1}" &> /tmp/capture_script.log &
            CAPTURE_SCRIPT_PID=$!

            # Run any post agent run script (if defined)
            # NOTE: We intentionally sleep for a bit to give agent time to fully
            # start up
            if [ ! -z "<< parameters.agent_post_run_command >>" ]; then
                echo "Running agent post run command..."
                sleep 2
                << parameters.agent_post_run_command >>
            fi

            # Wait for capture script to finish
            set +e
            sh -c 'tail -n +0 -F /tmp/capture_script.log | { sed "/Run completed, stopping the agent process./ q" && kill $$ ;}'
            wait ${CAPTURE_SCRIPT_PID} || true
            set -e

            # Send line count values for various log levels (if enabled)
            if [ "<< parameters.capture_line_counts >>" = "true" ]; then
                ./benchmarks/scripts/send-log-level-counts-to-codespeed.sh "${CIRCLE_SHA1}"
            fi
      - save_cache:
          key: deps1-{{ .Branch }}-<< parameters.cache_key_name >>-venv-{{ checksum "benchmarks/scripts/requirements.txt" }}
          paths:
            - "~/.cache/pip"
      # NOTE: We store the logs to ease with troubleshooting / debugging
      - store_artifacts:
          path: ~/scalyr-agent-dev/log

jobs:
  unittest-27:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:2.7-jessie-browsers
        environment:
          PYTHONPATH=./scalyr_agent/third_party
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "dev-requirements.txt" }}
      - run:
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install -r dev-requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "dev-requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: |
            source venv/bin/activate
            python run_tests.py

      - store_artifacts:
          path: xunit.xml

      - store_artifacts:
          path: cover/

  unittest-26:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: docker run -it -e TEST_BRANCH=${CIRCLE_BRANCH} -e PYTHON_VERSION=2.6 scalyr/scalyr-agent-ci-unittest:4 /tmp/unittest.sh

  smoke-standalone-27:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.7 -e SCALYR_API_KEY=${SCALYR_API_KEY} -e READ_API_KEY=${READ_API_KEY} -e SCALYR_SERVER=${SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker rm dummy;

  smoke-standalone-26:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.6 -e SCALYR_API_KEY=${SCALYR_API_KEY} -e READ_API_KEY=${READ_API_KEY} -e SCALYR_SERVER=${SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker rm dummy;

  smoke-standalone-27-tls12:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.7.nossl -e SCALYR_API_KEY=${SCALYR_API_KEY} -e READ_API_KEY=${READ_API_KEY} -e SCALYR_SERVER=${SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker rm dummy;

  smoke-standalone-26-tls12:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.6.nossl -e SCALYR_API_KEY=${SCALYR_API_KEY} -e READ_API_KEY=${READ_API_KEY} -e SCALYR_SERVER=${SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker rm dummy;

  smoke-docker-json:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-docker-json-{{ checksum "dev-requirements.txt" }}
      - run:
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install -r dev-requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-docker-json-{{ checksum "dev-requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: source ./.circleci/smoketest_docker.sh scalyr/scalyr-agent-ci-unittest:4 json 300

  smoke-docker-syslog:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-docker-json-{{ checksum "dev-requirements.txt" }}
      - run:
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install -r dev-requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-docker-json-{{ checksum "dev-requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: source ./.circleci/smoketest_docker.sh scalyr/scalyr-agent-ci-unittest:4 syslog 300

  smoke-k8s:
    machine:
      image: circleci/classic:201808-01
    environment:
      K8S_VERSION: v1.10.0
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v0.30.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - run:
          name: setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          name: start minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048 --kubernetes-version=${K8S_VERSION} &> $HOME/minikube.log 2>&1 < /dev/null
      - run:
          name: wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      - run:
          name: fix RBAC
          command: |
            # make default account cluster-admin
            kubectl create clusterrolebinding add-on-cluster-admin --clusterrole cluster-admin --serviceaccount=kube-system:default
      - run:
          name: dump cluster-info
          command: |
            kubectl cluster-info
            kubectl get po --all-namespaces
      - run:
          name: build k8s agent and run smoketest
          command: |
            source ./.circleci/smoketest_k8s.sh scalyr/scalyr-agent-ci-unittest:4 300 no_delete_existing_k8s_objs

  smoke-k8s-helm:
    machine:
      image: circleci/classic:201808-01
    environment:
      K8S_VERSION: v1.10.0
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v0.30.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - run:
          name: setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          name: setup helm
          command: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash
      - run:
          name: start minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048 --kubernetes-version=${K8S_VERSION} &> $HOME/minikube.log 2>&1 < /dev/null
      - run:
          name: wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      - run:
          name: fix RBAC
          command: |
            # make default account cluster-admin
            kubectl create clusterrolebinding add-on-cluster-admin --clusterrole cluster-admin --serviceaccount=kube-system:default
      - run:
          name: dump cluster-info
          command: |
            kubectl cluster-info
            kubectl get po --all-namespaces
      - run:
          name: install helm in cluster
          command: |
            kubectl -n kube-system create sa tiller
            kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
            helm init --wait --service-account tiller
      - run:
          name: deploy sample nginx
          command: kubectl run circleci-example --image=nginx
      - run:
          name: dump pods & services
          command: |
            # wait for all pods to start
            sleep 30
            # dump pods
            kubectl get po  --all-namespaces | grep -vE '(kube-sys|docker)'
            echo
            # dump services
            kubectl get svc  --all-namespaces | grep -vE '(kube-sys|docker)'

  benchmarks-idle-agent-py-27:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:2.7.17
    steps:
      - codespeed_agent_process_benchmark:
          codespeed_executable: "Python 2.7.17 - idle conf 1"
          codespeed_environment: "Circle CI Docker Executor Medium Size"
          agent_config: "benchmarks/configs/agent_no_monitored_logs.json"
          capture_line_counts: true
          cache_key_name: "benchmarks-idle-27"

  benchmarks-idle-agent-no-monitors-py-27:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:2.7.17
    steps:
      - codespeed_agent_process_benchmark:
          codespeed_executable: "Python 2.7.17 - idle conf 2"
          codespeed_environment: "Circle CI Docker Executor Medium Size"
          agent_config: "benchmarks/configs/agent_no_monitored_logs_no_monitors.json"
          capture_line_counts: true
          cache_key_name: "benchmarks-idle-agent-no-monitors-py-27"

  benchmarks-loaded-agent-single-50mb-log-file-with-parser-py-27:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:2.7.17
    steps:
      - codespeed_agent_process_benchmark:
          codespeed_executable: "Python 2.7.17 - loaded conf 1"
          codespeed_environment: "Circle CI Docker Executor Medium Size"
          agent_config: "benchmarks/configs/agent_single_50mb_access_log_file.json"
          agent_pre_run_command: "wget --directory-prefix=/tmp https://github.com/scalyr/codespeed-agent-fixtures/raw/master/fixtures/logs/access_log_50_mb.log"
          run_time: 140
          capture_line_counts: true
          cache_key_name: "benchmarks-loaded-agent-single-50mb-log-file-with-parser-py-27"

  # NOTE: For the benchmarks below to work correctly "/tmp/random.log" file
  # which is being written to during the benchmark must existing before the
  # agent process is started.
  benchmarks-loaded-agent-single-growing-log-file-20mb-py-27:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:2.7.17
    steps:
      - codespeed_agent_process_benchmark:
          codespeed_executable: "Python 2.7.17 - loaded conf 2"
          codespeed_environment: "Circle CI Docker Executor Medium Size"
          agent_config: "benchmarks/configs/agent_single_growing_log_file.json"
          run_time: 140
          agent_pre_run_command: "touch /tmp/random.log"
          agent_post_run_command: "benchmarks/scripts/write-random-lines.sh /tmp/random.log 2M 10 100 1"
          capture_line_counts: true
          cache_key_name: "benchmarks-loaded-agent-growing-log-file-py-27"

workflows:
  version: 2
  unittest:
    jobs:
      - unittest-27
      - unittest-26
      - smoke-standalone-27
      - smoke-standalone-26
      - smoke-standalone-27-tls12
      - smoke-standalone-26-tls12
      - smoke-docker-json
      - smoke-docker-syslog
      - smoke-k8s
  benchmarks:
    jobs:
      - benchmarks-idle-agent-py-27:
          <<: *master_only
      - benchmarks-idle-agent-no-monitors-py-27:
          <<: *master_only
      - benchmarks-loaded-agent-single-50mb-log-file-with-parser-py-27:
          <<: *master_only
      - benchmarks-loaded-agent-single-growing-log-file-20mb-py-27:
          <<: *master_only
