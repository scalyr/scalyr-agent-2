# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  unittest-27:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:2.7-jessie-browsers
        environment:
          PYTHONPATH=./scalyr_agent/third_party
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "dev-requirements.txt" }}
      - run:
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install -r dev-requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "dev-requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: |
            source venv/bin/activate
            python run_tests.py

      - store_artifacts:
          path: xunit.xml

      - store_artifacts:
          path: cover/

  unittest-26:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: docker run -it -e TEST_BRANCH=${CIRCLE_BRANCH} -e PYTHON_VERSION=2.6 scalyr/scalyr-agent-ci-unittest:4 /tmp/unittest.sh

  unittest-25:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: docker run -it -e TEST_BRANCH=${CIRCLE_BRANCH} -e PYTHON_VERSION=2.5 scalyr/scalyr-agent-ci-unittest:4 /tmp/unittest.sh

  unittest-24:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: docker run -it -e TEST_BRANCH=${CIRCLE_BRANCH} -e PYTHON_VERSION=2.4 scalyr/scalyr-agent-ci-unittest:4 /tmp/unittest.sh

  smoke-standalone-27:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.7 -e SCALYR_API_KEY=${SCALYR_API_KEY} -e READ_API_KEY=${READ_API_KEY} -e SCALYR_SERVER=${SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker rm dummy;
  smoke-standalone-26:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.6 -e SCALYR_API_KEY=${SCALYR_API_KEY} -e READ_API_KEY=${READ_API_KEY} -e SCALYR_SERVER=${SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker rm dummy;
  smoke-standalone-25:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.5 -e SCALYR_API_KEY=${SCALYR_API_KEY} -e READ_API_KEY=${READ_API_KEY} -e SCALYR_SERVER=${SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker rm dummy
  smoke-standalone-24:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.4 -e SCALYR_API_KEY=${SCALYR_API_KEY} -e READ_API_KEY=${READ_API_KEY} -e SCALYR_SERVER=${SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker rm dummy
  smoke-standalone-24-tlsproxy:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          # launch mitmproxy in reverse-proxy mode with port 8080 exposed, get it's IP address.
          # smoketest agent uploads to mitmproxy (http protocol because 2.4 pyenv currently doesn't support ssl)
          command: |
            docker network create mynet && \
            docker run --net mynet --rm -d --name mitmproxy --expose=8080 mitmproxy/mitmproxy mitmdump --mode reverse:${SCALYR_SERVER} --set ssl_version_client=TLSv1 --set ssl_version_server=TLSv1_2 && \
            export MITM_IPADDRESS=$(docker inspect -f "{{ .NetworkSettings.Networks.mynet.IPAddress }}" mitmproxy) && \
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run --net mynet -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.4 -e SCALYR_API_KEY=${TLS12_SCALYR_API_KEY} -e READ_API_KEY=${TLS12_READ_API_KEY} -e SCALYR_SERVER=${TLS12_SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM}-tlsproxy -e TLS_REVERSE_PROXY=http://${MITM_IPADDRESS}:8080 scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker kill mitmproxy && \
            docker rm dummy
  smoke-standalone-25-tlsproxy:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          # launch mitmproxy in reverse-proxy mode with port 8080 exposed, get it's IP address.
          # smoketest agent uploads to mitmproxy (no certificate validation)
          command: |
            docker network create mynet && \
            docker run --net mynet --rm -d --name mitmproxy --expose=8080 mitmproxy/mitmproxy mitmdump --mode reverse:${SCALYR_SERVER} --set ssl_version_client=TLSv1 --set ssl_version_server=TLSv1_2 && \
            export MITM_IPADDRESS=$(docker inspect -f "{{ .NetworkSettings.Networks.mynet.IPAddress }}" mitmproxy) && \
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run --net mynet -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.5 -e SCALYR_API_KEY=${TLS12_SCALYR_API_KEY} -e READ_API_KEY=${TLS12_READ_API_KEY} -e SCALYR_SERVER=${TLS12_SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM}-tlsproxy -e TLS_REVERSE_PROXY=https://${MITM_IPADDRESS}:8080 scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker kill mitmproxy && \
            docker rm dummy
  smoke-docker-json:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-docker-json-{{ checksum "dev-requirements.txt" }}
      - run:
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install -r dev-requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-docker-json-{{ checksum "dev-requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: source ./.circleci/smoketest_docker.sh scalyr/scalyr-agent-ci-unittest:4 json 300

  smoke-docker-syslog:
    docker:
      - image: circleci/python:2.7-jessie-browsers
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-docker-json-{{ checksum "dev-requirements.txt" }}
      - run:
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install -r dev-requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-docker-json-{{ checksum "dev-requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: source ./.circleci/smoketest_docker.sh scalyr/scalyr-agent-ci-unittest:4 syslog 300

  smoke-k8s:
    machine:
      image: circleci/classic:201808-01
    environment:
      K8S_VERSION: v1.10.0
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v0.30.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - run:
          name: setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          name: start minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048 --kubernetes-version=${K8S_VERSION} &> $HOME/minikube.log 2>&1 < /dev/null
      - run:
          name: wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      - run:
          name: fix RBAC
          command: |
            # make default account cluster-admin
            kubectl create clusterrolebinding add-on-cluster-admin --clusterrole cluster-admin --serviceaccount=kube-system:default
      - run:
          name: dump cluster-info
          command: |
            kubectl cluster-info
            kubectl get po --all-namespaces
      - run:
          name: build k8s agent and run smoketest
          command: |
            source ./.circleci/smoketest_k8s.sh scalyr/scalyr-agent-ci-unittest:4 300 no_delete_existing_k8s_objs

  smoke-k8s-helm:
    machine:
      image: circleci/classic:201808-01
    environment:
      K8S_VERSION: v1.10.0
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v0.30.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - run:
          name: setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          name: setup helm
          command: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash
      - run:
          name: start minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048 --kubernetes-version=${K8S_VERSION} &> $HOME/minikube.log 2>&1 < /dev/null
      - run:
          name: wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      - run:
          name: fix RBAC
          command: |
            # make default account cluster-admin
            kubectl create clusterrolebinding add-on-cluster-admin --clusterrole cluster-admin --serviceaccount=kube-system:default
      - run:
          name: dump cluster-info
          command: |
            kubectl cluster-info
            kubectl get po --all-namespaces
      - run:
          name: install helm in cluster
          command: |
            kubectl -n kube-system create sa tiller
            kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
            helm init --wait --service-account tiller
      - run:
          name: deploy sample nginx
          command: kubectl run circleci-example --image=nginx
      - run:
          name: dump pods & services
          command: |
            # wait for all pods to start
            sleep 30
            # dump pods
            kubectl get po  --all-namespaces | grep -vE '(kube-sys|docker)'
            echo
            # dump services
            kubectl get svc  --all-namespaces | grep -vE '(kube-sys|docker)'

workflows:
  version: 2
  unittest:
    jobs:
      - unittest-27
      - unittest-26
      - unittest-25
      - unittest-24
      - smoke-standalone-27
      - smoke-standalone-26
      - smoke-standalone-25
      - smoke-standalone-24
      - smoke-docker-json
      - smoke-docker-syslog
      - smoke-k8s
      - smoke-standalone-24-tlsproxy
      - smoke-standalone-25-tlsproxy
