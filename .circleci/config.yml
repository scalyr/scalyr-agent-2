# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.2/language-python/ for more details

master_and_release_only: &master_and_release_only
  filters:
    branches:
      only:
        - master
        - release
        # Those short lived branches are automatically created by our StackStorm build automation
        # so we can ensure all the jobs (including the ones which only run on master) pass before
        # merging a PR.
        - /automated_tests\/.*/

# NOTE: We intentionally don't want benchmarks to run on automated_tests/ branches.
benchmarks_master_and_release_only: &benchmarks_master_and_release_only
  filters:
    branches:
      only:
        - master
        - release

master_only: &master_only
  filters:
    branches:
      only:
        - master
        - improve_coverage
        # Those short lived branches are automatically created by our StackStorm build automation
        # so we can ensure all the jobs (including the ones which only run on master) pass before
        # merging a PR.
        - /automated_tests\/.*/

non_master_and_release: &non_master_and_release
  filters:
    branches:
      ignore:
        - master
        - release
        # Those short lived branches are automatically created by our StackStorm build automation
        # so we can ensure all the jobs (including the ones which only run on master) pass before
        # merging a PR.
        - /automated_tests\/.*/

# the "release_build" branch is used in the release process and should be triggered only through CircleCI API
# so, we skip triggering from regular git push.
skip_release_build_branch_push: &skip_release_build_branch_push
  unless:
    and:
      - equal: [ false, << pipeline.parameters.is_release_build >>]
      - equal: [ release_build,  << pipeline.git.branch >>]

version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  win: circleci/windows@2.4.0

# Global workflow level parameters
parameters:
  default_tox_version:
    type: string
    default: "3.20.1"
  default_pip_version:
    type: string
    default: "20.0.2"
  cache_version_docker_images:
    description: "Cache version suffix used for all the Docker image caches."
    type: string
    default: "v16"
  cache_version_py_dependencies:
    description: "Cache version suffix used for all the Python dependency caches."
    type: string
    default: "v7"
  is_release_build:
    description: "Only true when the pipeline is triggered for the release."
    type: boolean
    default: false
  agent_version:
    description: "The version of the packages which are built by specific jobs. It remains the same as in VERSION file if this parameter is empty."
    type: string
    default: ""
  release_repo_name:
    description: "The name of the target release S3 repo."
    type: string
    default: ""
  release_repo_base_url:
    description: "Build artifacts path in S3 repo."
    type: string
    default: ""

commands:
  run-tox-target:
    description: "Base command which runs the specified tox target."
    parameters:
      agent_host_name:
        type:
          string
      target_name:
        type:
          string
      upload_coverage:
        description: "True to combine and upload coverage data to codecov.io."
        type: boolean
        default: false
    steps:
      - run:
          name: "Run tox target: << parameters.target_name >>"
          command: |
            # Concatenate 'CIRCLE_BUILD_NUM' and 'AGENT_HOST_NAME' env. variables.
            # when job runs from CircleCi servers, the 'AGENT_HOST_NAME' is not set, so 'CIRCLE_BUILD_NUM' is used.
            # when job runs locally, the 'CIRCLE_BUILD_NUM' is not set, so 'AGENT_HOST_NAME' is used.
            export CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM}${AGENT_HOST_NAME}
            echo << parameters.agent_host_name >>
            export AGENT_HOST_NAME=<< parameters.agent_host_name >>-${CIRCLE_BUILD_NUM}
            echo "Using agent hostname: ${AGENT_HOST_NAME}"
            mkdir -p ~/artifacts

            tox -e << parameters.target_name >> -- --no-rebuild --artifacts-path ~/artifacts -n 2

      # NOTE: We store the logs to ease with troubleshooting / debugging
      - store_artifacts:
          path: ~/artifacts

      - when:
          condition: << parameters.upload_coverage >>
          steps:
            - run:
                name: Submit Coverage Data to codecov.io and Combine it and Upload it to S3
                command: |
                  # Also copy over .coverage file from tests (aka coverage for test files themselves)
                  mkdir ~/artifacts/tests-coverage/
                  cp .coverage ~/artifacts/tests-coverage/

                  # Each test function runs in an isolated Docker container and results in a new .coverage file which we need to combine
                  ls -la ~/artifacts/*/.coverage

                  pip install "coverage==4.5.4" "codecov==2.1.3" "apache-libcloud==2.8.3"
                  cp .circleci/.coveragerc_ci .coveragerc

                  # Generate combined .coverage file for all our test functions
                  ls -la .coverage*
                  coverage combine ~/artifacts/*/.coverage
                  ls -la .coverage*

                  # coverage data from inside docker contains uses different paths which we need to normalize for
                  # coverage combine and codecov reporting and merging to work.
                  sed -i "s#/agent_source/#/home/circleci/scalyr-agent-2/#g" .coverage

                  # Print the report
                  coverage report -i

                  # Submit it to codecov.io
                  coverage xml --rcfile=.coveragerc -i -o coverage.xml

                  ./scripts/submit-codecov-data.sh

                  # Combine it and upload it to S3
                  coverage combine || true
                  export PYTHONPATH=.
                  ./scripts/circleci/upload-coverage-data-to-s3.py ".coverage"

  init-cached-docker-image:
    description: "Base command which initialized Docker image cache."
    parameters:
      cache-key-prefix:
        type: string
      cache-path:
        type: string
      image-builder-path:
        type: string
      python_executable_path:
        type: string
        default: "/usr/bin/env python"
    steps:
      - run:
          name: "Get checksum file for builder '<< parameters.image-builder-path >>'."
          command: |
            python -m << parameters.image-builder-path >> --checksum > ~/image_checksum

      - restore_cache:
          name: "Restore docker image file for the builder '<< parameters.image-builder-path >>'."
          key: << parameters.cache-key-prefix >>-{{ .Branch }}-{{ checksum "~/image_checksum" }}-<< pipeline.parameters.cache_version_docker_images >>

      - run:
          name: "Build image by '<< parameters.image-builder-path >>' builder."
          command: |
             << parameters.python_executable_path >> -m << parameters.image-builder-path >> --build-with-cache << parameters.cache-path >>

      - save_cache:
          name: "Save docker image of the builder '<< parameters.image-builder-path >>' into cache."
          key: << parameters.cache-key-prefix >>-{{ .Branch }}-{{ checksum "~/image_checksum" }}-<< pipeline.parameters.cache_version_docker_images >>
          paths:
            - << parameters.cache-path >>

      - run:
          name: "Remove image checksum file."
          command: |
            rm -f ~/image_checksum

  install-cached-tox:
    description: "Base command which pre-populates cache for a specific tox target without running the tests."
    parameters:
      target_name:
        type: string
        default: ""
    steps:
      - restore_cache:
          name: "Restore Python Dependencies cache"
          key: deps-tox-{{ .Branch }}-3.6-venv-{{ checksum "dev-requirements.txt" }}-<< pipeline.parameters.cache_version_py_dependencies >>

      - run:
          name: Install Dependencies
          shell: bash
          command: |
            pip install "tox==<< pipeline.parameters.default_tox_version >>"

      - save_cache:
          name: "Save Python Dependencies cache"
          key: deps-tox-{{ .Branch }}-3.6-venv-{{ checksum "dev-requirements.txt" }}-<< pipeline.parameters.cache_version_py_dependencies >>
          paths:
            - "~/.cache/pip"

      - when:
          condition: << parameters.target_name >>
          steps:
            - run:
                name: "Init tox environment for target: '<< parameters.target_name >>'"
                command: |
                  tox -e<< parameters.target_name >> --notest

  package-test:
    description: "A base command for package smoke tests. It invokes tox / shell command with name '<parameters.command>'"
    parameters:
      distribution:
        description: "The name of the distribution where the agent will be installed."
        type: string
      python_version:
        description: "The version of the python interpreter to install in distribution."
        type: string
        default: ""
      tox_target:
        description: "Tox target name used to run the tests."
        type: string
      agent_host_name_prefix:
        description: "Host name for the agent instances that will be started during job."
        type: string
        default: ""
      upload_coverage:
        description: "True to combine and upload coverage data to codecov.io."
        type: boolean
        default: false
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
          version: 20.10.12

      - install-cached-tox:
          target_name: << parameters.tox_target >>

      - init-cached-docker-image:
          cache-key-prefix: fpm-builder
          cache-path: ~/fpm-builder-cache
          image-builder-path: tests.image_builder.distributions.fpm_package_builder.cmd
          python_executable_path: ./.tox/<< parameters.tox_target >>/bin/python

      - init-cached-docker-image:
          cache-key-prefix: << parameters.distribution >>
          cache-path: ~/<< parameters.distribution >>
          image-builder-path: tests.image_builder.distributions.<< parameters.distribution >>.cmd
          python_executable_path: ./.tox/<< parameters.tox_target >>/bin/python

      - run-tox-target:
          agent_host_name: << parameters.agent_host_name_prefix >>-<< parameters.distribution >>-<< parameters.python_version >>
          target_name:  << parameters.tox_target >>
          upload_coverage: << parameters.upload_coverage >>

      - slack/status:
          fail_only: true
          only_for_branches: master

  ami-tests:
    description: "Run scalyr agent packages sanity tests based on EC2/Libcloud."
    parameters:
      test_type:
        description: "Type of tests to run."
        type: enum
        enum:
          - "development"
          - "stable"
      test_os:
        description: "Tests for which operating system should run."
        type: enum
        enum:
          - "windows"
          - "linux"
        # URL to the installer script to use with the tests. We default to stable version, but
        # you can change that value if you made changes to the installer script and you want
        # to easily test them against all the distrod we run AMI tests on
      installer_script_url:
        description: "URL to the installer script which to use for the install and upgrade tests."
        type: string
        default: "https://www.scalyr.com/scalyr-repo/stable/latest/install-scalyr-agent-2.sh"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "18:2d:c0:70:b1:f9:31:22:49:14:d8:3a:08:01:3d:2c"
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          name: "Restore Python Dependencies cache"
          key: deps-<<pipeline.parameters.cache_version_py_dependencies>>-py310-{{ .Branch }}-ami-tests-{{ checksum "tests/ami/requirements.txt" }}
      - run:
          name: Install Python Dependencies
          command: |
            # NOTE: We need to upgrade pip otherwise installation from git fails
            python -m pip install --user --upgrade pip

            # Install dependencies
            python -m pip install --user "requests"
            python -m pip install --user -r tests/ami/requirements.txt
      - save_cache:
          name: "Save Python Dependencies cache"
          key: deps-<<pipeline.parameters.cache_version_py_dependencies>>-py310-{{ .Branch }}-ami-tests-{{ checksum "tests/ami/requirements.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          # Step which cleans up any old nodes which might have been left running because a
          # previous build was canceled half way through or similar
          name: Clean Up Old Stray EC2 Instances
          environment:
            KEY_NAME: "circleci"
            PRIVATE_KEY_PATH: "~/.ssh/id_rsa_182dc070b1f931224914d83a08013d2c"
            PYTHONPATH: "."
          command: |
            export ACCESS_KEY=${AWS_ACCESS_KEY}
            export SECRET_KEY=${AWS_SECRET_KEY}

            ./tests/ami/cleanup_old_test_instances.py
      - run:
          name: "Run package tests on EC2 instances (<< parameters.test_os >>)"
          environment:
            KEY_NAME: "circleci"
            PRIVATE_KEY_PATH: "~/.ssh/id_rsa_182dc070b1f931224914d83a08013d2c"
            PYTHONPATH: "."
          no_output_timeout: 25m
          command: |
            export ACCESS_KEY=${AWS_ACCESS_KEY}
            export SECRET_KEY=${AWS_SECRET_KEY}
            export INSTALLER_SCRIPT_URL="<< parameters.installer_script_url >>"

            # If testing type is "development" we use installer script which is built in another job.
            if [ "<< parameters.test_type >>" = "development" ]; then
              export INSTALLER_SCRIPT_URL="/tmp/workspace/installScalyrAgentV2.sh"
            fi

            set +e

            max_attempts="2"
            sleep_delay="15"

            i=0
            until [ "$i" -ge ${max_attempts} ]; do
                echo "Running tests command"

                # On subsequent runs we enable VERBOSE flag to perhaps make
                # troubleshooting easier
                if [ "${i}" -ge 1 ]; then
                    export VERBOSE="true"
                fi

                ./scripts/circleci/run-ami-tests-in-bg.sh << parameters.test_type >> << parameters.test_os >>
                exit_code=$?

                # We preserve logs of all the runs - we move logs to directory per run iteration
                mkdir -p outputs/run_$i/
                cp outputs/*.log outputs/run_$i/
                rm outputs/*.log

                if [ "${exit_code}" -eq 0 ]; then
                    echo "Command exited with 0, breaking from the loop."
                    break
                else
                    echo "Command exited with non-zero status, retrying in ${sleep_delay} seconds..."
                fi
                i=$((i+1))
                sleep ${sleep_delay}
              done

              set -e

              if [ "${exit_code}" -ne 0 ]; then
                  echo "Command failed to exit with zero exit code after 2 attempts, failing (exit_code=${exit_code})"
                  exit 1
              fi

              exit 0

      - store_artifacts:
          path: outputs

      - slack/status:
          fail_only: true
          only_for_branches: master

jobs:
  package-test-rpm:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: cimg/python:3.6
    steps:
      - package-test:
          distribution: "amazonlinux2"
          agent_host_name_prefix: "package-test"
          tox_target: agent_distributions_tests_amazonlinux2

  package-test-deb:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: cimg/python:3.6
    steps:
      - package-test:
          distribution: "ubuntu2204"
          agent_host_name_prefix: "package-test"
          tox_target: agent_distributions_tests_ubuntu2204

  # Circle CI jobs which build agent packages for each PR.
  package-build-deb:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: cimg/python:3.6
    steps:
      - package-test:
          distribution: "ubuntu1804"
          agent_host_name_prefix: "-test"
          tox_target: agent_deb_package

  package-build-rpm:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: cimg/python:3.6
    steps:
      - package-test:
          distribution: "centos8"
          agent_host_name_prefix: "-test"
          tox_target: agent_rpm_package

  smoke-rpm-package-py3:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: cimg/python:3.6
    steps:
      - package-test:
          distribution: "amazonlinux2"
          python_version: "python3"
          agent_host_name_prefix: "smoke"
          tox_target: agent_package_smoke_test_amazonlinux_python3

  smoke-rpm-package-py2:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: cimg/python:3.6
    steps:
      - package-test:
          distribution: "amazonlinux2"
          python_version: "python2"
          tox_target: agent_package_smoke_test_amazonlinux_python2

  smoke-deb-package-py3:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: cimg/python:3.6
    steps:
      - package-test:
          distribution: "ubuntu1804"
          python_version: "python3"
          tox_target: agent_package_smoke_test_ubuntu_python3

  smoke-deb-package-py2:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: cimg/python:3.6
    steps:
      - package-test:
          distribution: "ubuntu1804"
          python_version: "python2"
          tox_target: agent_package_smoke_test_ubuntu_python2

  build-windows-package:
    description: "Build windows MSI installer."
    executor:
      name: win/default
      size: "medium"
      # windows-server-2019-vs2019:previous
      version: "previous"
      shell: bash
    parameters:
      python-version:
        description: Version of the Python interpreter to use.
        default: 3.10.7
        type: string
    steps:
      - checkout
      - restore_cache:
          name: Restore Python installer Cache
          key: windows-v2-python-installer-cache-{{ .Branch }}-<< parameters.python-version >>

      - restore_cache:
          name: Restore Wix cache
          key: windows-wix-cache-{{ .Branch }}

      - run:
          name: Extract Wix.
          shell: powershell.exe
          command: |
            $ProgressPreference = "SilentlyContinue"
            mkdir wix311_binaries -Force
            if (!(Test-Path .\wix311_binaries\wix311-binaries.zip -PathType Leaf)) {
              wget https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip -OutFile wix311_binaries\wix311-binaries.zip
            }
            Expand-Archive -LiteralPath wix311_binaries\wix311-binaries.zip -DestinationPath C:\wix311

      - run:
          name: Install python.
          shell: powershell.exe
          command: |
            $ProgressPreference = "SilentlyContinue"
            mkdir python_installer -Force
            if (!(Test-Path .\python_installer\python-amd64.exe -PathType Leaf)) {
                wget -O .\python_installer\python-amd64.exe https://www.python.org/ftp/python/<< parameters.python-version >>/python-<< parameters.python-version >>-amd64.exe
            }
            python_installer\python-amd64.exe /quiet /passive

      - save_cache:
          name: Save Wix Cache
          key: windows-wix-cache-{{ .Branch }}
          paths:
            - "wix311_binaries"

      - save_cache:
          name: Save Python Installer Cache
          key: windows-v2-python-installer-cache-{{ .Branch }}-<< parameters.python-version >>
          paths:
            - "python_installer"

      - restore_cache:
          name: Restore Python Dependencies Cache
          key: windows_python_installer-python-<< parameters.python-version >>-{{ .Branch }}-py-deps-cache

      - when:
          condition: << pipeline.parameters.agent_version >>
          steps:
            - run:
                name: Change package version to << pipeline.parameters.agent_version >>.
                shell: bash
                command: |
                  echo << pipeline.parameters.agent_version >> > VERSION
      - unless:
          condition: << pipeline.parameters.agent_version >>
          steps:
            - run:
                name: Bump Version
                shell: bash
                command: |
                  # Update agent version to avoid version conflict with current scalyr repository package.
                  # This way we can also correctly assert that the upgrade has worked - if we didn't do
                  # that, from and to version would be the same
                  # NOTE: We can't include git revision as part of the version since it's not a valid
                  # version on Windows.

                  echo "$(cat VERSION).1" > VERSION
                  cat VERSION
      - run:
          name: Build MSI package
          shell: powershell.exe
          command: |
              $Env:WIX = ";C:\wix311;"

              # Make sure step fails on any command failure
              Set-StrictMode -Version Latest
              $ErrorActionPreference = "Stop"

              function ThrowOnNativeFailure {
                if (-not $?)
                {
                    throw 'Native Failure'
                }
              }

              $PSDefaultParameterValues['*:ErrorAction']='Stop'

              C:\Users\circleci\AppData\Local\Programs\Python\Python310\python.exe -m pip install -r win32\windows-build-requirements.txt

              # TODO: This step doesn't correctly exit with non zero on failure
              C:\Users\circleci\AppData\Local\Programs\Python\Python310\python.exe build_package.py win32
              ThrowOnNativeFailure

              mkdir package
              mkdir artifacts

              cp .\ScalyrAgentInstaller-*.msi artifacts/
              mv .\ScalyrAgentInstaller-*.msi package\ScalyrAgentInstaller.msi

              $ErrorActionPreference = "Stop"
              Test-Path -Path package/ScalyrAgentInstaller.msi -PathType Leaf

      - run:
          name: Copy Package With Version in Name
          shell: bash
          command: |
            # NOTE: We preserve two versions of the package as the build artifact. One with the
            # version in the name and one without.
            # This way AMI tests can use one with the static name and if we use it elsewhere (aka
            # if someone wgets a dev package or similar) they immediately know it's a dev version
            # from the name itself.
            export PACKAGE_VERSION="$(cat VERSION)"
            cp package/ScalyrAgentInstaller.msi package/ScalyrAgentInstaller-${PACKAGE_VERSION}.msi

      - save_cache:
          name: Save Python Dependencies Cache
          key: windows_python_installer-python-<< parameters.python-version >>-{{ .Branch }}-py-deps-cache
          paths:
            - C:\Users\circleci\AppData\Local\pip\Cache

      - persist_to_workspace:
          root: package
          paths: ScalyrAgentInstaller.msi

      - store_artifacts:
          path: artifacts

  build-linux-packages-and-installer-script:
    description: "Build deb and rpm packages."
    working_directory: ~/scalyr-agent-2
    docker:
        # NOTE: fpm and git gem depend on Ruby >= 2.3 so we need to use Debian
        # 10 which ships with Ruby 2.5. Jessie (Debian 8) ships with 2.1 which
        # doesn't work anymore with those gems.
        - image: cimg/python:3.6
    environment:
      RELEASE_REPO_NAME: "<< pipeline.parameters.release_repo_name >>"
      RELEASE_REPO_BASE_URL: "<< pipeline.parameters.release_repo_base_url >>"
      RELEASE_AGENT_VERSION: "<< pipeline.parameters.agent_version >>"
    steps:
      - checkout
      - restore_cache:
          key: deps2-tox-{{ .Branch }}-3.6-venv-{{ checksum "dev-requirements.txt" }}

      - run:
          name: Install System Dependencies
          command: |
            sudo apt-key update
            sudo apt update
            sudo apt install -y ruby ruby-dev rubygems rpm build-essential --force-yes
            # Needed to validate rpm package
            sudo apt install -y rpm

            # TODO: looks like fpm upgraded its 'ffi' dependency version, which is now requres newer version of ruby.
            # as a temporaty solution explicitly specify ffi version.
            sudo gem install --no-document ffi:1.14.2 fpm:1.12.0

      - run:
          name: Build packages and install script.
          command: |
            mkdir output
            mkdir artifacts
            mkdir package

            bash  ~/scalyr-agent-2/scripts/circleci/release/build-linux-packages-and-installer-script.sh \
              "$RELEASE_AGENT_VERSION" \
              ./output \
              "$RELEASE_REPO_BASE_URL" \
              "$RELEASE_REPO_NAME" \

            cp output/*.rpm output/*.deb output/installScalyrAgentV2.sh output/RELEASE_VERSION output/scalyr.repo artifacts

            cp artifacts/scalyr-agent-2*.deb package/scalyr-agent-2.deb
            cp artifacts/scalyr-agent-2*.rpm package/scalyr-agent-2.rpm
            cp artifacts/installScalyrAgentV2.sh package/installScalyrAgentV2.sh

      - persist_to_workspace:
          root: package
          paths:
            - scalyr-agent-2.deb
            - scalyr-agent-2.rpm
            - installScalyrAgentV2.sh

      - store_artifacts:
          path: artifacts

  ami-tests-stable-windows:
    # TODO As of Jan 2023, this feature requires a plan upgrade
    #circleci_ip_ranges: true # opt into this functionlity for whitelisting purposes
    description: "Run scalyr agent packages install sanity tests for the stable packages from the Scalyr repository."
    working_directory: ~/scalyr-agent-2
    docker:
      - image: cimg/python:3.10
    # TODO: Remove resource_class and use default medium one if tests are still
    # failing with large
    resource_class: medium
    steps:
      - ami-tests:
          test_type: "stable"
          test_os: "windows"

  ami-tests-stable-linux:
    #circleci_ip_ranges: true # opt into tlinuxhis functionlity for whitelisting purposes
    description: "Run scalyr agent packages install sanity tests for the stable packages from the Scalyr repository."
    working_directory: ~/scalyr-agent-2
    docker:
      - image: cimg/python:3.10
    # TODO: Remove resource_class and use default medium one if tests are still
    # failing with large
    resource_class: medium
    steps:
      - ami-tests:
          test_type: "stable"
          test_os: "linux"

  ami-tests-development-windows:
    #circleci_ip_ranges: true # opt into this functionlity for whitelisting purposes
    description: "Run scalyr agent packages sanity tests for the new packages which are built on the current revision."
    working_directory: ~/scalyr-agent-2
    docker:
      - image: cimg/python:3.10
    # TODO: Remove resource_class and use default medium one if tests are still
    # failing with large
    resource_class: medium
    steps:
      - ami-tests:
          test_type: "development"
          test_os: "windows"

  ami-tests-development-linux:
    #circleci_ip_ranges: true # opt into this functionlity for whitelisting purposes
    description: "Run scalyr agent packages sanity tests for the new packages which are built on the current revision."
    working_directory: ~/scalyr-agent-2
    docker:
      - image: cimg/python:3.10
    # TODO: Remove resource_class and use default medium one if tests are still
    # failing with large
    resource_class: medium
    steps:
      - ami-tests:
          test_type: "development"
          test_os: "linux"

workflows:
 version: 2
 package-tests:
   <<: *skip_release_build_branch_push
   jobs:
     - build-linux-packages-and-installer-script
     - build-windows-package
     - package-test-rpm:
         context: scalyr-agent
         <<: *master_and_release_only
     - package-test-deb:
         context: scalyr-agent
         <<: *master_and_release_only
     - smoke-rpm-package-py2:
         context: scalyr-agent
         requires:
           - package-test-rpm
         <<: *master_and_release_only
     - smoke-rpm-package-py3:
         context: scalyr-agent
         requires:
           - package-test-rpm
         <<: *master_and_release_only
     - smoke-deb-package-py2:
         context: scalyr-agent
         requires:
           - package-test-deb
         <<: *master_and_release_only
     - smoke-deb-package-py3:
         context: scalyr-agent
         requires:
           - package-test-deb
         <<: *master_and_release_only
     - ami-tests-development-windows:
          context: scalyr-agent
          requires:
            - build-windows-package
     - ami-tests-development-linux:
          context: scalyr-agent
          requires:
            - build-linux-packages-and-installer-script
     - ami-tests-stable-windows:
          context: scalyr-agent
          <<: *master_and_release_only
     - ami-tests-stable-linux:
          context: scalyr-agent
          <<: *master_and_release_only
 # We run AMI based package install tests which utilize installer script on
 # daily basis.
 # This helps us detect various installer script and other potential upstream
 # issues.
 daily-stable-ami-package-install-tests:
   triggers:
     - schedule:
         cron: "0 2 * * *"
         filters:
           branches:
             only:
               - master
   jobs:
     - ami-tests-stable-windows:
         context: scalyr-agent
     - ami-tests-stable-linux:
         context: scalyr-agent
     - build-linux-packages-and-installer-script
     - build-windows-package
     - package-test-rpm:
         context: scalyr-agent
     - package-test-deb:
         context: scalyr-agent
     - smoke-rpm-package-py2:
         context: scalyr-agent
         requires:
           - package-test-rpm
     - smoke-rpm-package-py3:
         context: scalyr-agent
         requires:
           - package-test-rpm
     - smoke-deb-package-py2:
         context: scalyr-agent
         requires:
           - package-test-deb
     - smoke-deb-package-py3:
         context: scalyr-agent
         requires:
           - package-test-deb
