# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
commands:
  unittest_tox:
    description: "A base command for all tox based unit test jobs"
    parameters:
      python_version:
        description: "Python version to use (e.g. 3.5, 3.6, 3.7, 3.8, etc.)."
        type: string
      tox_version:
        description: "tox package version to use."
        type: string
        default: "3.14.3"
      apt_dependencies:
        description: "Any optional apt dependencies which should be installed."
        type: string
        default: ""
      tox_target:
        description: "Tox target to run."
        type: string
      store_coverage:
        description: "True to persist / store coverage data."
        type: boolean
        default: false
    steps:
      - checkout
      - restore_cache:
          key: deps2-tox-{{ .Branch }}-<< parameters.python_version >>-unit-tests-venv-{{ checksum "dev-requirements.txt" }}
      - when:
          condition: << parameters.apt_dependencies >>
          steps:
            - run:
                name: Install APT Dependencies
                command: |
                    apt-get update -y
                    apt-get install -y << parameters.apt_dependencies >>
      - run:
          name: Install Dependencies
          command: |
            pip install "tox==<< parameters.tox_version >>"
      - run:
          name: Run Unit Tests under Python << parameters.python_version >>
          command: |
            tox -e<< parameters.tox_target >>
      - save_cache:
          key: deps2-tox-{{ .Branch }}-<< parameters.python_version >>-unit-tests-venv-{{ checksum "dev-requirements.txt" }}
          paths:
            - "~/.cache/pip."
      - when:
          condition: << parameters.store_coverage >>
          steps:
            - run:
                name: Move Coverage Data
                command: |
                    mkdir -p coverage-unittest-<< parameters.python_version >>
                    mv .coverage coverage-unittest-<< parameters.python_version >>/.coverage.unittest-<< parameters.python_version >>
            - persist_to_workspace:
                root: coverage-unittest-<< parameters.python_version >>
                paths:
                    .coverage.unittest-<< parameters.python_version >>

jobs:
  unittest-38:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:3.8
    steps:
      - unittest_tox:
          python_version: "3.8"
          tox_target: "py3.8-unit-tests"

  unittest-37:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:3.7
    steps:
      - unittest_tox:
          python_version: "3.7"
          tox_target: "py3.7-unit-tests"

  unittest-36:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:3.6
    steps:
      - unittest_tox:
          python_version: "3.6"
          tox_target: "py3.6-unit-tests"

  unittest-35:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:3.5
    steps:
      - unittest_tox:
          python_version: "3.5"
          tox_target: "py3.5-unit-tests"

  unittest-27:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:2.7
    steps:
      - unittest_tox:
          python_version: "2.7"
          tox_target: "coverage"
          store_coverage: true

  unittest-26:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: dockershelf/python:2.6-dev
    steps:
      - unittest_tox:
          python_version: "2.6"
          tox_version: "2.9.1"
          tox_target: "py2.6-unit-tests"
          apt_dependencies: "procps"

  smoke-standalone-37:
    docker:
      - image: circleci/python:3.6-jessie
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          command: |
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=3.7 -e SCALYR_API_KEY=${SCALYR_API_KEY} -e READ_API_KEY=${READ_API_KEY} -e SCALYR_SERVER=${SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker rm dummy;

  smoke-standalone-27:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          command: |
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.7 -e SCALYR_API_KEY=${SCALYR_API_KEY} -e READ_API_KEY=${READ_API_KEY} -e SCALYR_SERVER=${SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker rm dummy;
  smoke-standalone-26:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          command: |
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.6 -e SCALYR_API_KEY=${SCALYR_API_KEY} -e READ_API_KEY=${READ_API_KEY} -e SCALYR_SERVER=${SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker rm dummy;
  smoke-standalone-27-tls12:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          command: |
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.7.nossl -e SCALYR_API_KEY=${SCALYR_API_KEY} -e READ_API_KEY=${READ_API_KEY} -e SCALYR_SERVER=${SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker rm dummy;
  smoke-standalone-26-tls12:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          command: |
            docker container create --name dummy -v shared_vol:/app alpine && \
            docker cp $(pwd)/.circleci/smoketest_standalone.sh dummy:/app/ && \
            docker run -it -v shared_vol:/app -e TEST_BRANCH=${CIRCLE_BRANCH} -e MAX_WAIT=300 -e PYTHON_VERSION=2.6.nossl -e SCALYR_API_KEY=${SCALYR_API_KEY} -e READ_API_KEY=${READ_API_KEY} -e SCALYR_SERVER=${SCALYR_SERVER} -e CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} scalyr/scalyr-agent-ci-unittest:4 /app/smoketest_standalone.sh && \
            docker rm dummy;

  smoke-docker-json:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout
      - restore_cache:
          key: deps2-{{ .Branch }}-docker-json-{{ checksum "dev-requirements.txt" }}
      - run:
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install -r dev-requirements.txt
      - save_cache:
          key: deps2-{{ .Branch }}-docker-json-{{ checksum "dev-requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: |
            mkdir -p coverage-smoke-docker-json
            source ./.circleci/smoketest_docker.sh scalyr/scalyr-agent-ci-unittest:4 json 300
            mv .coverage coverage-smoke-docker-json/.coverage.smoke-docker-json

      - persist_to_workspace:
          root: coverage-smoke-docker-json
          paths:
            .coverage.smoke-docker-json

  smoke-docker-syslog:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout
      - restore_cache:
          key: deps2-{{ .Branch }}-docker-json-{{ checksum "dev-requirements.txt" }}
      - run:
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install -r dev-requirements.txt
      - save_cache:
          key: deps2-{{ .Branch }}-docker-json-{{ checksum "dev-requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: |
            mkdir -p coverage-smoke-docker-syslog
            source ./.circleci/smoketest_docker.sh scalyr/scalyr-agent-ci-unittest:4 syslog 300
            mv .coverage coverage-smoke-docker-syslog/.coverage.smoke-docker-syslog

      - persist_to_workspace:
          root: coverage-smoke-docker-syslog
          paths:
            .coverage.smoke-docker-syslog

  smoke-k8s:
    machine:
      image: circleci/classic:201808-01
    environment:
      K8S_VERSION: v1.10.0
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v0.30.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - run:
          name: setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          name: start minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048 --kubernetes-version=${K8S_VERSION} &> $HOME/minikube.log 2>&1 < /dev/null
      - run:
          name: wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      - run:
          name: fix RBAC
          command: |
            # make default account cluster-admin
            kubectl create clusterrolebinding add-on-cluster-admin --clusterrole cluster-admin --serviceaccount=kube-system:default
      - run:
          name: dump cluster-info
          command: |
            kubectl cluster-info
            kubectl get po --all-namespaces
      - run:
          name: build k8s agent and run smoketest
          command: |
            mkdir -p coverage-smoke-k8s
            source ./.circleci/smoketest_k8s.sh scalyr/scalyr-agent-ci-unittest:4 300 no_delete_existing_k8s_objs
            mv .coverage coverage-smoke-k8s/.coverage.smoke-k8s

      - persist_to_workspace:
          root: coverage-smoke-k8s
          paths:
            .coverage.smoke-k8s

  smoke-k8s-helm:
    machine:
      image: circleci/classic:201808-01
    environment:
      K8S_VERSION: v1.10.0
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v0.30.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - run:
          name: setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          name: setup helm
          command: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash
      - run:
          name: start minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048 --kubernetes-version=${K8S_VERSION} &> $HOME/minikube.log 2>&1 < /dev/null
      - run:
          name: wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      - run:
          name: fix RBAC
          command: |
            # make default account cluster-admin
            kubectl create clusterrolebinding add-on-cluster-admin --clusterrole cluster-admin --serviceaccount=kube-system:default
      - run:
          name: dump cluster-info
          command: |
            kubectl cluster-info
            kubectl get po --all-namespaces
      - run:
          name: install helm in cluster
          command: |
            kubectl -n kube-system create sa tiller
            kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
            helm init --wait --service-account tiller
      - run:
          name: deploy sample nginx
          command: kubectl run circleci-example --image=nginx
      - run:
          name: dump pods & services
          command: |
            # wait for all pods to start
            sleep 30
            # dump pods
            kubectl get po  --all-namespaces | grep -vE '(kube-sys|docker)'
            echo
            # dump services
            kubectl get svc  --all-namespaces | grep -vE '(kube-sys|docker)'

  coverage:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - restore_cache:
          key: deps2-{{ .Branch }}-{{ checksum "dev-requirements.txt" }}
      - run:
          name: Install dependencies
          command: |
            # Small safety check to make sure the build fails if codecov.yml file is invalid.
            # By default codecov doesn't fail on invalid config and simply falls back to
            # system wide default config in case repo local config is invalid. This usually results
            # in confused and undesired behavior.
            curl --max-time 10 --data-binary @codecov.yml https://codecov.io/validate | grep -i 'Valid!'
            virtualenv venv
            source venv/bin/activate
            pip install "coverage==4.5.4" "codecov==2.0.15"
            mkdir -p cov
            cp .circleci/.coveragerc_ci cov/.coveragerc

      - attach_workspace:
          at: cov

      - run:
          name: Combine coverage
          working_directory: cov
          command: |
            source ../venv/bin/activate
            ls -la .
            ls -la ../*coverage* || true
            coverage combine

      - store_artifacts:
          path: cov

      - run:
          name: Print coverage report
          working_directory: cov
          command: |
            source ../venv/bin/activate
            coverage report

      - run:
          name: Upload coverage data to codecov.io
          working_directory: cov
          command: |
            source ../venv/bin/activate
            coverage xml --rcfile=.coveragerc -i -o coverage.xml
            codecov --root=/home/circleci/scalyr-agent-2/ --disable gcov --file coverage.xml

  lint-checks:
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:3.6-jessie
    steps:
      - checkout
      - restore_cache:
          key: deps2-tox-{{ .Branch }}-lint-venv-{{ checksum "dev-requirements.txt" }}-{{ checksum "lint-requirements.txt" }}
      - run:
          name: Install Python dependencies
          command: |
            sudo pip install "tox==3.14.3"
      - run:
          name: Run Lint Checks
          command: |
            tox -e lint
      - save_cache:
          key: deps2-tox-{{ .Branch }}-lint-venv-{{ checksum "dev-requirements.txt" }}-{{ checksum "lint-requirements.txt" }}
          paths:
            - "~/.cache/pip."

  send-circle-ci-usage-report:
    description: "Job which emails weekly Circle CI usage report"
    working_directory: ~/scalyr-agent-2
    docker:
      - image: circleci/python:3.6-jessie
    steps:
      - checkout
      - run:
          name: Email Usage Report
          command: |
            export PYTHONPATH=.
            python scripts/circleci_usage_data.py --project_slug=gh/scalyr/scalyr-agent-2 \
                --workflow=unittest --status=success --branch=all --limit=5 \
                --email=cloudtech-builds@scalyr.com

workflows:
  version: 2
  unittest:
    jobs:
      - lint-checks
      - unittest-38
      - unittest-37
      - unittest-36
      - unittest-35
      - unittest-27
      - unittest-26
      - smoke-standalone-37
      - smoke-standalone-27
      - smoke-standalone-26
      - smoke-standalone-27-tls12
      - smoke-standalone-26-tls12
      - smoke-docker-json
      - smoke-docker-syslog
      - smoke-k8s
      - coverage:
          requires:
            - unittest-27
            - smoke-docker-json
            - smoke-docker-syslog
            - smoke-k8s
  weekly-circle-ci-usage-report:
    triggers:
      - schedule:
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - master
    jobs:
      - send-circle-ci-usage-report
