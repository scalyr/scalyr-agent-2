name: "Kubernetes End to End Tests"

on:
  workflow_call:
    inputs:
      python_version:
        description: "Version of Python to use."
        type: string

      cache_version:
        description: "Version suffix for the cache key. May be useful when it is needed to invalidate the cache."
        type: string

      aws_region:
        description: "AWS region for remote builds."
        type: string

      aws_private_key_name:
        description: "Name of a private key that is used to connect to AWS EC2 instances that will be created by this workflow."
        type: string

      cicd_workflow:
        description: "Additional string that has to differentiate AWS object from another workflows."
        type: string

    secrets:
      CT_AWS_DEV_EC2_PRIVATE_KEY:
        required: true
      CT_AWS_DEV_EC2_ACCESS_KEY:
        required: true
      CT_AWS_DEV_EC2_SECRET_KEY:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ:
        required: true
      PUBLISH_REGISTRY_USERNAME:
        required: true
      PUBLISH_REGISTRY_PASSWORD:
        required: true

jobs:
  coverage:
    runs-on: ubuntu-latest
    if: ( success() || failure() ) && github.ref_name != '_release_build'
    needs:
      - k8s-smoketest
      - docker-smoketest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: 3.8
      - name: Install pycoverage
        run: pip install coverage==4.5.4
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          path: reports

      - name: Prepare Coverage Data for codecov.io
        run: |
          coverage combine reports/**/.coverage
          coverage xml -i -o coverage.xml

      - name: Upload Coverage to Codecov.io
        uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # pin@v3.1.4
        with:
          files: ./coverage.xml
          fail_ci_if_error: true

  # Build cacheable requirements of the images.
  build_image_requirements:
    name: requirements-${{ matrix.builder_name }}-${{ matrix.architecture }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        builder_name: ["ubuntu", "alpine"]
        architecture: ["x86_64", "aarch64", "armv7"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: install python and requirements
        uses: ./.github/actions/install_python_and_requirements
        with:
          python_version: ${{ inputs.python_version }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2.0.0
        with:
          driver-opts: network=host

      - name: Expose GitHub Runtime To Be Able to Use GHA Cache By Docker.
        uses: crazy-max/ghaction-github-runtime@715c25b40ccc0df9b62bfa8be3ccc57d09dbc4b1

      - name: Build requirements
        shell: bash
        id: build
        env:
          AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
          AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
          AWS_PRIVATE_KEY_PATH: "/tmp/private_key.pem"
          AWS_REGION: ${{ inputs.aws_region }}
          CICD_WORKFLOW: ${{ inputs.cicd_workflow }}
          CICD_JOB: build_image_requirements-${{ matrix.builder_name }}-${{ matrix.architecture }}

          USE_GHA_CACHE: "1"
          ALLOW_FALLBACK_TO_REMOTE_BUILDER: "1"
          CACHE_VERSION: ${{ inputs.cache_version }}
        run: |
          echo "${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}" > "${AWS_PRIVATE_KEY_PATH}"
          chmod 600 "${AWS_PRIVATE_KEY_PATH}"
          
          python3 build_package_new.py \
            image \
            ${{ matrix.builder_name }} \
            cache-requirements \
            --architecture ${{ matrix.architecture }}


  build_image_tarball:
    name: Build image tarball ${{  matrix.variant.image_type }}-${{ matrix.variant.builder_name }}
    runs-on: ubuntu-22.04
    needs:
      - build_image_requirements
    strategy:
      matrix:
        variant:
          - { "builder_name": "ubuntu" , "image_type": "k8s" }
          - { "builder_name": "ubuntu" , "image_type": "docker-json" }
          - { "builder_name": "ubuntu" , "image_type": "docker-syslog" }
          - { "builder_name": "ubuntu" , "image_type": "docker-api" }
          - { "builder_name": "alpine" , "image_type": "k8s" }
          - { "builder_name": "alpine" , "image_type": "docker-json" }
          - { "builder_name": "alpine" , "image_type": "docker-syslog" }
          - { "builder_name": "alpine" , "image_type": "docker-api" }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: install python and requirements
        uses: ./.github/actions/install_python_and_requirements
        with:
          python_version: ${{ inputs.python_version }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2.0.0
        with:
          driver-opts: network=host

      - name: Expose GitHub Runtime To Be Able to Use GHA Cache By Docker.
        uses: crazy-max/ghaction-github-runtime@715c25b40ccc0df9b62bfa8be3ccc57d09dbc4b1

      - name: Build image tarball
        shell: bash
        id: build
        env:
          CICD_WORKFLOW: ${{ inputs.cicd_workflow }}
          CICD_JOB: ${{  matrix.variant.image_type }}-${{ matrix.variant.builder_name }}

          USE_GHA_CACHE: "1"
          CACHE_VERSION: ${{ inputs.cache_version }}
        run: |
          python3 build_package_new.py \
            image \
            ${{ matrix.variant.builder_name }} \
            build-tarball \
            --image-type ${{  matrix.variant.image_type }} \
            --output-dir ./build

      - name: Save image OCI tarball as artifact
        uses: actions/upload-artifact@v3
        with:
          name: container-image-tarball-${{  matrix.variant.image_type }}-${{ matrix.variant.builder_name }}
          path: build
          retention-days: 1

  # Jobs which performs basic sanity checks for the Kubernetes Monitor and Kubernetes Events Monitor
  k8s_kubernetes_monitor_tests:
    name: Kubernetes Monitors - k8s ${{ matrix.k8s_version.version }}-${{ matrix.k8s_version.runtime}}
    runs-on: ubuntu-20.04
    if: github.ref_name != '_release_build'
    timeout-minutes: 15

    needs:
      - build_image_tarball

    strategy:
      fail-fast: false
      matrix:
        k8s_version:
          # NOTE: We don't test under very old versions where CronJob was part of v2alpha1 since in
          # those versions CronJobs are not enabled by default and need to be installed extra
          - { "version": "v1.17.17", "driver": "", "runtime": "docker", "run_cronjob_checks": false }
          - { "version": "v1.20.15", "driver": "", "runtime": "docker", "run_cronjob_checks": false }
          - { "version": "v1.21.10", "driver": "", "runtime": "docker", "run_cronjob_checks": true }
          - { "version": "v1.22.7", "driver": "", "runtime": "docker", "run_cronjob_checks": true }
          # NOTE: Using containerd runtime in minikube on GHA only works with docker driver
          - { "version": "v1.23.17", "driver": "docker", "runtime": "containerd", "run_cronjob_checks": true }
          - { "version": "v1.24.14", "driver": "docker", "runtime": "containerd", "run_cronjob_checks": true }
          - { "version": "v1.25.10", "driver": "docker", "runtime": "containerd", "run_cronjob_checks": true }
          - { "version": "v1.26.5", "driver": "docker", "runtime": "containerd", "run_cronjob_checks": true }

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: install python and requirements
        uses: ./.github/actions/install_python_and_requirements
        with:
          python_version: ${{ inputs.python_version }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2.0.0
        with:
          driver-opts: network=host

      - name: Install Scalyr tool
        run: |
          curl https://raw.githubusercontent.com/scalyr/scalyr-tool/master/scalyr > scalyr
          chmod +x scalyr
          sudo mv scalyr /usr/local/bin

      - name: Setup minikube k8s cluster
        uses: ./.github/actions/setup-minikube-cluster/
        with:
          k8s_version: "${{ matrix.k8s_version.version }}"
          minikube_driver: "${{ matrix.k8s_version.driver }}"
          container_runtime: "${{ matrix.k8s_version.runtime }}"
          github_token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Download OCI tarball of the built image.
        uses: actions/download-artifact@v3
        with:
          name: container-image-tarball-k8s-ubuntu
          path: /tmp/image_tarball

      - name: Expose GitHub Runtime To Be Able to Use GHA Cache By Docker.
        uses: crazy-max/ghaction-github-runtime@715c25b40ccc0df9b62bfa8be3ccc57d09dbc4b1

      - name: Build Agent k8s Test Docker Image
        env:
          USE_GHA_CACHE: "1"
          CACHE_VERSION: ${{ inputs.cache_version }}
        run: |
          python3 tests/end_to_end_tests/container_images_test/scripts/build_test_image.py \
            --image-builder-name ubuntu \
            --architecture x86_64 \
            --image-oci-tarball /tmp/image_tarball/k8s-ubuntu.tar \
            --result-image-name k8s-ubuntu:test \
            --image-type k8s

          docker image ls

          # Needed for containerd runtime
          if [ "${{ matrix.k8s_version.runtime }}" = "containerd" ]; then
            minikube image load k8s-ubuntu:test
          fi

      # Here we build the dummy container which continuously prints data to stdout and stderr
      - name: Build Dummy App Docker Image
        run: |
          docker build -f docker/Dockerfile.docker_monitor_testing_config -t std-printer scripts/
          docker image ls

          # Needed for containerd runtime
          if [ "${{ matrix.k8s_version.runtime }}" = "containerd" ]; then
            minikube image load std-printer:latest
          fi

      # Create pod for our mock std printer container which logs will be ingested by the agent
      - name: Create mock pod
        run: |
          kubectl apply -f tests/e2e/k8s_k8s_monitor/std_printer_deployment.yaml

          sleep 10
          kubectl get pods -A

          export APP_POD_NAME=$(kubectl get pod --namespace=default --selector=app=std-printer -o jsonpath="{.items[0].metadata.name}")
          echo "APP_POD_NAME=${APP_POD_NAME}" >> ${GITHUB_ENV}
          echo "APP_POD_NAME=${APP_POD_NAME}"

          echo ""
          kubectl logs "${APP_POD_NAME}"
          echo ""

      # We create mock CronJob so we can assert that Kubernetes Events monitor correctly handles
      # CronJob and Job Events.
      - name: Create mock CronJob (v1)
        if: ${{ matrix.k8s_version.run_cronjob_checks }}
        run: |
          # We need to use a different file for different K8s versions due to promotion (removal of
          # old v1beta alias) from v1beta to v1 in v1.25.0. v1 has been available since v1.21.0
          kubectl apply -f tests/e2e/k8s_events_monitor/cronjob_v1.yaml

          sleep 10
          kubectl get cronjob -A

      - name: Create scalyr-agent-2 daemonset
        uses: ./.github/actions/install-k8s-agent/
        with:
          scalyr_server: "agent.scalyr.com"
          scalyr_api_key: "${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE }}"
          scalyr_cluster_name: "${K8S_CLUSTER_NAME}"
          scalyr_k8s_events_disable: "false"
          main_yaml_path: "tests/e2e/scalyr-agent-2-daemonset.yaml"

      - name: Verify data has been ingested
        timeout-minutes: 14
        env:
          # Needed for scalyr-tool
          scalyr_readlog_token: "${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ }}"
          SCALYR_AGENT_POD_NAME: "${{ env.SCALYR_AGENT_POD_NAME }}"
          K8S_NODE_NAME: "${{ env.K8S_NODE_NAME }}"
        run: |
          export RETRY_ATTEMPTS="14"
          export SLEEP_DELAY="10"

          # Verify agent is running
          echo "Agent running checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Starting scalyr agent..."'

          # Verify Kubernetes monitor is running
          echo "Kubernetes Monitor running checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "kubernetes_monitor parameters: ignoring namespaces: "'
          echo ""

          # Verify Kubernetes events monitor is running
          echo "Kubernetes events monitor running checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Starting monitor kubernetes_events_monitor"'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Acting as Kubernetes event leader"'
          echo ""

          # Verify initial std-printer pod data has been ingested

          # 1. First we want for some data to be ingested using "log.config.scalyr.com/attributes.parser"
          # annotation set as part of the deployment YAML.
          # After a while, we change that dynamically using kubectl and verify that this change has
          # been correctly picked up by the agent.
          sleep 20

          echo "Initial pod ingested data checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" app="std-printer" parser="test-parser-1" stream="stdout" "stdout: line 2"'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" app="std-printer" parser="test-parser-1" stream="stderr" "stderr: line 2"'
          echo ""

          kubectl describe pod ${APP_POD_NAME}
          kubectl annotate --overwrite pods ${APP_POD_NAME} log.config.scalyr.com/attributes.parser="changed"
          kubectl describe pod ${APP_POD_NAME}

          # Give agent some time to pick up the annotation change (by default we poll every 30 seconds
          # for pod metadata changes, but we use lower value for the tests)
          sleep 15

          echo ""
          echo "Post annotation change data checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" app="std-printer" parser="changed" stream="stdout" "stdout: line"'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" app="std-printer" parser="changed" stream="stderr" "stderr: line"'
          echo ""

          # Verify Kubernetes Events Monitor events are ingested
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_events.log" $parser="k8sEvents" "\"kind\":\"Event\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_events.log" $parser="k8sEvents" "\"kind\":\"Pod\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_events.log" $parser="k8sEvents" "involvedObject"'
          # This event is not always available under Kubernetes >= 1.25
          #./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_events.log" $parser="k8sEvents" "NodeReady"'

          agent_status=$(kubectl --namespace=scalyr exec -i ${SCALYR_AGENT_POD_NAME} --container scalyr-agent -- scalyr-agent-2 status -v)
          k8s_event_log_files_number=$(echo "$agent_status" | grep -c 'Path /var/log/scalyr-agent-2/kubernetes_events.log: copied')

          if [ "$k8s_event_log_files_number" != 1 ]; then
            echo "Kubernetes event monitor log has to be handled by the agent 1 time, but it got ${k8s_event_log_files_number}"
            exit 1
          fi

      # We only assert this under newer Kubernetes versions since in the old ones CronJobs were not
      # available out of the box
      - name: Verify Job and CronJob events are ingested
        if: ${{ matrix.k8s_version.run_cronjob_checks }}
        timeout-minutes: 5
        env:
          # Needed for scalyr-tool
          scalyr_readlog_token: "${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ }}"
          SCALYR_AGENT_POD_NAME: "${{ env.SCALYR_AGENT_POD_NAME }}"
          K8S_NODE_NAME: "${{ env.K8S_NODE_NAME }}"
        run: |
          export RETRY_ATTEMPTS="14"
          export SLEEP_DELAY="10"

          # Verify agent is running
          echo "Job events checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_events.log" $parser="k8sEvents" k8s-kind="Job" watchEventType="ADDED" reason="Completed"'

          echo "CronJob events checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_events.log" $parser="k8sEvents" k8s-kind="CronJob" involvedObjectKind="CronJob" involvedObjectName="hello" watchEventType="ADDED" reason="SawCompletedJob"'

      - name: Notify Slack on Failure
        if: ${{ failure() && github.ref_name == 'master' }}
        uses: act10ns/slack@ed1309ab9862e57e9e583e51c7889486b9a00b0f # v2.0.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#eng-dataset-cloud-tech'

  k8s_open_metrics_monitor_tests:
    name: OpenMetrics Monitor - k8s ${{ matrix.k8s_version.version }}-${{ matrix.k8s_version.runtime}}
    runs-on: ubuntu-20.04
    if: github.ref_name != '_release_build'
    timeout-minutes: 15

    needs:
      - build_image_tarball

    strategy:
      fail-fast: false
      matrix:
        k8s_version:
          - { "version": "v1.17.17", "driver": "", "runtime": "docker" }
          - { "version": "v1.20.15", "driver": "", "runtime": "docker" }
          - { "version": "v1.21.10", "driver": "", "runtime": "docker" }
          - { "version": "v1.22.7", "driver": "", "runtime": "docker" }
          # NOTE: Using containerd runtime in minikube on  GHA only works with docker driver
          - { "version": "v1.23.17", "driver": "docker", "runtime": "containerd" }
          - { "version": "v1.24.14", "driver": "docker", "runtime": "containerd" }
          - { "version": "v1.25.10", "driver": "docker", "runtime": "containerd" }
          - { "version": "v1.26.5", "driver": "docker", "runtime": "containerd" }

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: install python and requirements
        uses: ./.github/actions/install_python_and_requirements
        with:
          python_version: ${{ inputs.python_version }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2.0.0
        with:
          driver-opts: network=host

      - name: Install Scalyr tool
        run: |
          curl https://raw.githubusercontent.com/scalyr/scalyr-tool/master/scalyr > scalyr
          chmod +x scalyr
          sudo mv scalyr /usr/local/bin

      - name: Setup minikube k8s cluster
        uses: ./.github/actions/setup-minikube-cluster/
        with:
          k8s_version: "${{ matrix.k8s_version.version }}"
          minikube_driver: "${{ matrix.k8s_version.driver }}"
          container_runtime: "${{ matrix.k8s_version.runtime }}"
          github_token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Download OCI tarball of the built image.
        uses: actions/download-artifact@v3
        with:
          name: container-image-tarball-k8s-ubuntu
          path: /tmp/image_tarball

      - name: Expose GitHub Runtime To Be Able to Use GHA Cache By Docker.
        uses: crazy-max/ghaction-github-runtime@715c25b40ccc0df9b62bfa8be3ccc57d09dbc4b1

      - name: Build Agent k8s Test Docker Image
        env:
          USE_GHA_CACHE: "1"
          CACHE_VERSION: ${{ inputs.cache_version }}
        run: |
          python3 tests/end_to_end_tests/container_images_test/scripts/build_test_image.py \
            --image-builder-name ubuntu \
            --architecture x86_64 \
            --image-oci-tarball /tmp/image_tarball/k8s-ubuntu.tar \
            --result-image-name k8s-ubuntu:test \
            --image-type k8s

          docker image ls

          # Needed for containerd runtime
          if [ "${{ matrix.k8s_version.runtime }}" = "containerd" ]; then
            minikube image load k8s-ubuntu:test
          fi

      # Here we build the dummy Java app image which exposes JMX metrics via exporter
      - name: Build Test Java App Docker Image
        run: |
          pushd tests/e2e/k8s_om_monitor/java-hello-world
          docker build -t java-hello-world .
          popd

          docker image ls

          # Needed for containerd runtime
          if [ "${{ matrix.k8s_version.runtime }}" = "containerd" ]; then
            minikube image load java-hello-world:latest
          fi

      # Create mock pods and exporters which will be scrapped by the monitor
      - name: Create mock pods and exporters
        run: |
          kubectl create namespace monitoring

          # 1. node exporter pod
          kubectl apply -f tests/e2e/k8s_om_monitor/node_exporter.yaml

          # 2. kube state metrics deployment
          kubectl apply -k tests/e2e/k8s_om_monitor/kube-state-metrics/

          # 3. Install dummy java app container with jmx exporter side
          kubectl apply -f tests/e2e/k8s_om_monitor/java_app_deployment.yaml

          sleep 20
          kubectl get pods -A

      - name: Create scalyr-agent-2 daemonset
        uses: ./.github/actions/install-k8s-agent/
        with:
          scalyr_server: "agent.scalyr.com"
          scalyr_api_key: "${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE }}"
          scalyr_cluster_name: "${K8S_CLUSTER_NAME}"
          main_yaml_path: "tests/e2e/k8s_om_monitor/scalyr-agent-2-daemonset.yaml"
          # Monitor is not enabled by default yet since it's still in preview and testing phase so
          # we expliticly enable it here
          extra_yaml_paths: "tests/e2e/k8s_om_monitor/scalyr-agent-extra-config-configmap.yaml"

      - name: Verify data has been ingested
        timeout-minutes: 14
        env:
          # Needed for scalyr-tool
          scalyr_readlog_token: "${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ }}"
          SCALYR_AGENT_POD_NAME: "${{ env.SCALYR_AGENT_POD_NAME }}"
          K8S_NODE_NAME: "${{ env.K8S_NODE_NAME }}"
          K8S_CLUSTER_NAME: "${{ env.K8S_CLUSTER_NAME }}"
        run: |
          export RETRY_ATTEMPTS="14"
          export SLEEP_DELAY="10"

          # Verify agent is running
          echo "Agent running checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Starting scalyr agent..."'

          # Verify monitor is running
          echo "Monitor running checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Found 3 URL(s) to scrape for node"'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "There are currently 3 dynamic and 2 static open metrics monitors running"'
          echo ""

          # Kubernetes API metrics (static monitor)
          echo "Kubernetes API metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-kubernetes-api-metrics.log" "process_max_fds 1000000 k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-kubernetes-api-metrics.log" "process_open_fds "'

          # Kubernetes API cAdvisor metrics (static monitor)
          echo "Kubernetes API cAdvisor metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-kubernetes-api-cadvisor-metrics" "machine_cpu_cores 2"'
          MINIMUM_RESULTS=2 ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-kubernetes-api-cadvisor-metrics" "container_cpu_load_average_10s "'
          # Verify locally calculated rate metrics
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-kubernetes-api-cadvisor-metrics" "container_cpu_usage_seconds_total_rate "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-kubernetes-api-cadvisor-metrics" "container_network_receive_bytes_total_rate "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-kubernetes-api-cadvisor-metrics" "container_network_transmit_bytes_total_rate "'

          # 2. Verify node exporter metrics
          echo "Node exporter metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-node-exporter-" "process_max_fds "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-node-exporter-" "process_open_fds "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-node-exporter-" "node_vmstat_pswpin "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-node-exporter-" "node_vmstat_pswpout "'
          # Verify locally calculated rate metrics
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-node-exporter-" "node_cpu_seconds_total_rate "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-node-exporter-" "node_network_transmit_bytes_total_rate "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-node-exporter-" "node_network_receive_bytes_total_rate "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-node-exporter-" "node_disk_read_bytes_total_rate "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-node-exporter-" "node_disk_written_bytes_total_rate "'

          # 3. Verify kube state event metrics
          echo "Kube state events metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "kube-state-metrics" "kube_storageclass_labels 1 k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\" storageclass=\"standard\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "kube-state-metrics" "kube_secret_type 1 k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\" namespace=\"scalyr\" secret=\"scalyr-api-key\" type=\"Opaque\""'

          # 4. Verify java app JMX metrics
          echo "Java JMX metrics events metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "java-hello-world" "jmx_scrape_error 0.0 app=\"java-hello-world\" app_instance=\"java-hello-world-1\" attribute1=\"value1\" k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "java-hello-world" "jmx_scrape_cached_beans 0.0 app=\"java-hello-world\" app_instance=\"java-hello-world-1\" attribute1=\"value1\" k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "java-hello-world" "jvm_info 1.0 app=\"java-hello-world\" app_instance=\"java-hello-world-1\" attribute1=\"value1\" k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\" runtime="'

          # Client side calculated per second rate metrics
          # NOTE: There is no easy way to assert on the actual rate metric value here (we have unit tests for that)
          # so we just assert that the metric is present.
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "java-hello-world" "jvm_threads_started_total_rate" "app=\"java-hello-world\" app_instance=\"java-hello-world-1\" attribute1=\"value1\" k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "java-hello-world" "jvm_memory_pool_allocated_bytes_total_rate" "app=\"java-hello-world\" app_instance=\"java-hello-world-1\" attribute1=\"value1\" k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "java-hello-world" "process_cpu_seconds_total_rate" "app=\"java-hello-world\" app_instance=\"java-hello-world-1\" attribute1=\"value1\" k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\""'

      - name: Notify Slack on Failure
        if: ${{ failure() && github.ref_name == 'master' }}
        uses: act10ns/slack@ed1309ab9862e57e9e583e51c7889486b9a00b0f # v2.0.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#eng-dataset-cloud-tech'

  k8s-smoketest:
    runs-on: ubuntu-20.04
    needs:
      - build_image_tarball
    if: github.ref_name != '_release_build'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: install python and requirements
        uses: ./.github/actions/install_python_and_requirements
        with:
          python_version: ${{ inputs.python_version }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2.0.0
        with:
          driver-opts: network=host

      - name: Expose GitHub Runtime To Be Able to Use GHA Cache By Docker.
        uses: crazy-max/ghaction-github-runtime@715c25b40ccc0df9b62bfa8be3ccc57d09dbc4b1

      - name: Setup minikube k8s cluster
        uses: ./.github/actions/setup-minikube-cluster/
        with:
          k8s_version: v1.22.0
          minikube_driver: ""
          container_runtime: "docker"
          github_token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Download OCI tarball of the built image.
        uses: actions/download-artifact@v3
        with:
          name: container-image-tarball-k8s-ubuntu
          path: /tmp/image_tarball

      - name: Expose GitHub Runtime To Be Able to Use GHA Cache By Docker.
        uses: crazy-max/ghaction-github-runtime@715c25b40ccc0df9b62bfa8be3ccc57d09dbc4b1


      - name: Build test image
        env:
          USE_GHA_CACHE: "1"
          CACHE_VERSION: ${{ inputs.cache_version }}
        run: |
          python3 tests/end_to_end_tests/container_images_test/scripts/build_test_image.py \
            --image-builder-name ubuntu \
            --architecture x86_64 \
            --image-oci-tarball /tmp/image_tarball/k8s-ubuntu.tar \
            --result-image-name k8s-ubuntu:test \
            --image-type k8s

      - name: Run Tests (with coverage)
        env:
          CIRCLE_BUILD_NUM: ${{ github.run_number }}
          SCALYR_SERVER: https://agent.scalyr.com
          SCALYR_API_KEY: ${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE }}
          READ_API_KEY: ${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ }}
        run: |
          source ./.circleci/smoketest_k8s.sh scalyr/scalyr-agent-ci-unittest:4 150 no_delete_existing_k8s_objs k8s-ubuntu:test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: k8s-smoketest
          path: |
            .coverage
        if: ${{ success() || failure() }}

      - name: Notify Slack on Failure
        if: ${{ failure() && github.ref_name == 'master' }}
        uses: act10ns/slack@ed1309ab9862e57e9e583e51c7889486b9a00b0f # v2.0.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#eng-dataset-cloud-tech'

  docker-smoketest:
    name: Docker Smoketest - ${{ matrix.variant.image_type }}
    if: github.ref_name != '_release_build'
    needs:
      - build_image_tarball
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        variant:
          - image_type: docker-json
            timeout: 150
          - image_type: docker-syslog
            timeout: 150
          - image_type: docker-api
            timeout: 200
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: install python and requirements
        uses: ./.github/actions/install_python_and_requirements
        with:
          python_version: ${{ inputs.python_version }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2.0.0
        with:
          driver-opts: network=host

      - name: Expose GitHub Runtime To Be Able to Use GHA Cache By Docker.
        uses: crazy-max/ghaction-github-runtime@715c25b40ccc0df9b62bfa8be3ccc57d09dbc4b1

      - name: Download OCI tarball of the built image.
        uses: actions/download-artifact@v3
        with:
          name: container-image-tarball-${{ matrix.variant.image_type }}-ubuntu
          path: /tmp/image_tarball

      - name: Expose GitHub Runtime To Be Able to Use GHA Cache By Docker.
        uses: crazy-max/ghaction-github-runtime@715c25b40ccc0df9b62bfa8be3ccc57d09dbc4b1

      - name: Build test image
        env:
          USE_GHA_CACHE: "1"
          CACHE_VERSION: ${{ inputs.cache_version }}
        run: |
          python3 tests/end_to_end_tests/container_images_test/scripts/build_test_image.py \
            --image-builder-name ubuntu \
            --architecture x86_64 \
            --image-oci-tarball /tmp/image_tarball/${{ matrix.variant.image_type }}-ubuntu.tar \
            --result-image-name ${{ matrix.variant.image_type }}-ubuntu:test \
            --image-type ${{ matrix.variant.image_type }}

      - name: Run Tests (with coverage)
        env:
          CIRCLE_BUILD_NUM: ${{ github.run_number }}
          SCALYR_SERVER: https://agent.scalyr.com
          SCALYR_API_KEY: ${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE }}
          READ_API_KEY: ${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ }}
        run: |
          source ./.circleci/smoketest_docker.sh scalyr/scalyr-agent-ci-unittest:4 ${{ matrix.variant.image_type }} ${{ matrix.variant.timeout }} ${{ matrix.variant.image_type }}-ubuntu:test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: docker-smoketest-${{ matrix.variant.image_type }}
          path: |
            .coverage
        if: ${{ success() || failure() }}

      - name: Notify Slack on Failure
        if: ${{ failure() && github.ref_name == 'master' }}
        uses: act10ns/slack@ed1309ab9862e57e9e583e51c7889486b9a00b0f # v2.0.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#eng-dataset-cloud-tech'

  publish_images:
    name: Publish image ${{ matrix.variant.image_type }}-${{ matrix.variant.builder_name }}
    runs-on: ubuntu-20.04
    if: github.ref_type == 'tag' || github.ref_name == 'master' || github.head_ref == 'release' || github.event_name == 'pull_request'
    needs:
      - build_image_tarball
      - k8s_kubernetes_monitor_tests
      - k8s_open_metrics_monitor_tests
      - k8s-smoketest
      - docker-smoketest
    strategy:
      matrix:
        variant:
          - { "builder_name": "ubuntu", "image_type": "k8s" }
          - { "builder_name": "ubuntu", "image_type": "docker-json" }
          - { "builder_name": "ubuntu", "image_type": "docker-syslog" }
          - { "builder_name": "ubuntu", "image_type": "docker-api" }
          - { "builder_name": "alpine", "image_type": "k8s" }
          - { "builder_name": "alpine", "image_type": "docker-json" }
          - { "builder_name": "alpine", "image_type": "docker-syslog" }
          - { "builder_name": "alpine", "image_type": "docker-api" }
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: install python and requirements
        uses: ./.github/actions/install_python_and_requirements
        with:
          python_version: ${{ inputs.python_version }}

      - name: Download OCI tarball of the built image.
        uses: actions/download-artifact@v3
        with:
          name: container-image-tarball-${{ matrix.variant.image_type }}-${{ matrix.variant.builder_name }}
          path: /tmp/image_tarball


      - name: Verify and Create Tags
        id: verify
        shell: bash
        run: |
          AGENT_VERSION="$(cat VERSION | tr -d '\n')"

          if [ "${{ github.ref_type }}" = "tag" ]; then
            if [ "${{ github.ref_name }}" = "v${AGENT_VERSION}" ]; then
              echo "tags=$AGENT_VERSION,latest" >> "${GITHUB_OUTPUT}"
            else
              echo "tags=empty" >> "${GITHUB_OUTPUT}"
            fi        
          elif [ "${{ github.ref_name }}" = "master" ]; then
              echo "tags=${{ github.sha }}" >> "${GITHUB_OUTPUT}"
          elif [ "${{ github.head_ref }}" = "release" ]; then
              echo "tags=pr-${{ github.event.number}}-${{ github.event.pull_request.commits}}-${{ github.sha }},\
              pr-${{ github.event.number}}-latest-${{ github.sha }},\
              $AGENT_VERSION,latest" >> "${GITHUB_OUTPUT}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "tags=pr-${{ github.event.number}}-${{ github.event.pull_request.commits}}-${{ github.sha }},\
              pr-${{ github.event.number}}-latest-${{ github.sha }}" >> "${GITHUB_OUTPUT}"
          else
            echo "tags=empty" >> "${GITHUB_OUTPUT}"
          fi

      - name: Publish image
        if: steps.verify.outputs.tags != 'empty'
        run: |
          python3 build_package_new.py \
            image \
            ${{ matrix.variant.builder_name }} \
            publish \
            --registry docker.io \
            --name-prefix "${{ secrets.PUBLISH_REGISTRY_USERNAME }}" \
            --tags "${{ steps.verify.outputs.tags }}" \
            --from-oci-layout /tmp/image_tarball/${{ matrix.variant.image_type }}-${{ matrix.variant.builder_name }}.tar \
            --registry-username "${{ secrets.PUBLISH_REGISTRY_USERNAME }}" \
            --registry-password "${{ secrets.PUBLISH_REGISTRY_PASSWORD }}" \
            --image-type ${{ matrix.variant.image_type }}
