name: Build Agent Images

on:
  workflow_call:
    inputs:
      image-type:
        description: "Name of the image build type (docker-json, docker-syslog, docker-api, k8s)."
        required: true
        type: string
      python-version:
        required: false
        type: string
        default: 3.8.10
      publish:
        description: "If true, then the result image will be published on master branch or any tag."
        type: boolean
        required: false
        default: false

    secrets:
      SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN:
        required: true
      SCALYR_CLOUDTECH_TESTING_DEV_SCALYR_READ_API_KEY:
        required: true
      DOCKER_HUB_USERNAME:
        required: true
      DOCKER_HUB_PASSWORD:
        required: true

env:
  DOCKER_BUILDKIT: 1

jobs:
  # TODO move here tests from the CicleCi.

  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - image_distro_name: "buster"
          - image_distro_name: "alpine"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - name: Perform the deployment of the test environment
        uses: ./.github/actions/perform-deployment
        with:
          deployment-name: "test_environment"

      - name: Sanity check deployments logic by running internal tests
        run: |
          python3 -m pytest agent_build/tools/tests

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:qemu-v6.1.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Start minikube for the test of the kubernetes build
        if: inputs.image-type == 'k8s'
        shell: bash
        run: |
          minikube start

      - name: Get checksum of the base image files
        run: |
          python3 build_package_new.py "${{ inputs.image-type }}-${{ matrix.image_distro_name }}" --files-checksum --debug
          python3 build_package_new.py "${{ inputs.image-type }}-${{ matrix.image_distro_name }}" --files-checksum > image_files_checksum.txt

      - name: Check for the docker buildx cache.
        uses: actions/cache@v2
        with:
          path: ~/docker-test-image-build-cache
          key: agent-docker-test-image-buildx-cache-${{ inputs.image-type }}-${{ matrix.image_distro_name }}-${{ hashFiles('image_files_checksum.txt') }}

      - name: Run image test
        env:
            SCALYR_API_KEY: ${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}
        run: |

          mkdir -p ~/docker-test-image-build-cache
          # If cache exists, then it goes to the input of the build.
          mv ~/docker-test-image-build-cache ~/docker-test-image-build-cache-in
          # If cache does not exist, then create a new epty cache directory,
          # where a new build cache will be stored.
          mkdir -p ~/docker-test-image-build-cache

          python3 tests/package_tests/run_package_test.py package-test \
           "${{ inputs.image-type }}-${{ matrix.image_distro_name }}_test" \
            --name-suffix "_${{ github.run_number }}${{ github.run_attempt }}" \
            --cache-from-dir ~/docker-test-image-build-cache-in \
            --cache-to-dir ~/docker-test-image-build-cache

  publish:
    needs: [test]
    name: Publish Docker Image
    if: ${{ inputs.publish == true && (github.ref == 'refs/heads/master' || github.ref_type == 'tag') }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # We build 2 type of images - one based on Debian Buster Slim image and another set based
          # on Alpine Linux
          - image_distro_name: "buster"
            image_tag_suffix: ""
            image_tag_suffix_full: ""
          # NOTE: For non empty suffixes, "image_tag_suffix_full" version needs to contain leading "-"
          - image_distro_name: "alpine"
            image_tag_suffix: "alpine"
            image_tag_suffix_full: "-alpine"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:qemu-v6.1.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Get checksum of the base image files
        run: |
          python3 build_package_new.py "${{ inputs.image-type }}-${{ matrix.image_distro_name }}" --files-checksum --debug
          python3 build_package_new.py "${{ inputs.image-type }}-${{ matrix.image_distro_name }}" --files-checksum > image_files_checksum.txt

      - name: Check for the docker buildx cache.
        uses: actions/cache@v2
        with:
          path: ~/docker-image-build-cache
          key: agent-docker-image-buildx-cache-${{ inputs.image-type }}-${{ matrix.image_distro_name }}-${{ hashFiles('image_files_checksum.txt') }}

      - name: Prepare build cache directories.
        run: |
          mkdir -p ~/docker-image-build-cache
          # If cache exists, then it goes to the input of the build.
          mv ~/docker-image-build-cache ~/docker-image-build-cache-in
          # If cache does not exist, then create a new empty cache directory,
          # where a new build cache will be stored.
          mkdir -p ~/docker-image-build-cache

      - name: Push image using the master branch commit SHA.
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          # NOTE: --remove-image-name-prefix is needed in case Docker hub usename is not scalyr
          python3 build_package_new.py "${{ inputs.image-type }}-${{ matrix.image_distro_name }}" \
            --registry "${{ secrets.DOCKER_HUB_USERNAME }}" \
            --remove-image-name-prefix \
            --push \
            --tag "${{ github.sha }}${{ matrix.image_tag_suffix_full }}" \
            --cache-from-dir ~/docker-image-build-cache-in \
            --cache-to-dir ~/docker-image-build-cache

      - name: Push image using the tag.
        if: ${{ github.ref_type == 'tag' }}
        run: |
          tag_options=$(python3 scripts/cicd/verify_and_get_image_tag_to_publish.py "${{ github.ref_name }})" --sufix "${{ matrix.image_tag_suffix }}"

          python3 build_package_new.py ${{ inputs.image-type }} \
            --registry "${{ secrets.DOCKER_HUB_USERNAME }}" \
            --remove-image-name-prefix \
            --push \
            --cache-from-dir ~/docker-image-build-cache-in \
            --cache-to-dir ~/docker-image-build-cache \
            ${tag_options}

          # Check the cache directory size post build
          du -hs ~/docker-image-build-cache
          ls -lah ~/docker-image-build-cache
