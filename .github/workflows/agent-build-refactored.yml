name: Agent Build Refactored

on:
  push:
  schedule:
    - cron: '0 4 * * *'

permissions:
  contents: read

env:
  DOCKER_BUILDKIT: 1
  # Set this variable to tell the agent build code that it runs in CI/CD and it needs to use caching.
  AGENT_BUILD_IN_CICD: "1"

# This job skips another workflows with identical content and also generates strategy matrices for all further jobs.
# Since we can do a "master" run (on push and PR to a master branch) and "non-master" run, it generates matrices with different
#  size according to that information.
jobs:
  pre_job:
    runs-on: ubuntu-20.04
    outputs:
      is_master_run: ${{ steps.init-matrices.outputs.is_master_run }}
      to_publish: ${{ steps.init-matrices.outputs.to_publish }}
      is_production: ${{ steps.init-matrices.outputs.is_production }}
      version: ${{ steps.init-matrices.outputs.version }}
      # The following outputs will be used by the other jobs below as their strategy matrices.
      pre_build_steps_matrix_json: ${{ steps.init-matrices.outputs.pre_build_steps_matrix_json }}
      agent_image_build_matrix_json: ${{ steps.init-matrices.outputs.agent_image_build_matrix_json }}
      managed_packages_build_matrix_json: ${{ steps.init-matrices.outputs.managed_packages_build_matrix_json }}
      managed_packages_test_matrix_json: ${{ steps.init-matrices.outputs.managed_packages_test_matrix_json }}



    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8.13"

      - name: Init job matrices
        uses: ./.github/actions/init-job-matrices
        id: init-matrices
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

          # In this action we define all our job matrices. It filters out jobs that must not be executed if
          # workflow run is not from the 'master' branch or from PR to the 'master' branch.
          # Jobs that has to be in a non-master workflow run has to have a '"master_run_only": false' field.
          # In the 'non-master' runs we only build debian-based images.
          images-to-build: |
            [
              { "name": "docker-json-debian", "master_run_only": false },
              { "name": "docker-syslog-debian", "master_run_only": false },
              { "name": "docker-api-debian", "master_run_only": false },
              { "name": "k8s-debian", "master_run_only": false },
              { "name": "docker-json-alpine", "master_run_only": true },
              { "name": "docker-syslog-alpine", "master_run_only": true },
              { "name": "docker-api-alpine", "master_run_only": true },
              { "name": "k8s-alpine", "master_run_only": true }
            ]

          managed-packages-to-build: |
            [
              { "name": "deb-amd64", "master_run_only": false },
              { "name": "rpm-x86_64", "master_run_only": false }
            ]

          managed-packages-to-test: |
            [
              { "name": "deb-amd64",  "distro-name": "ubuntu2204",    "remote-machine-type": "ec2",    "master_run_only": false },
              { "name": "deb-amd64",  "distro-name": "ubuntu2004",    "remote-machine-type": "ec2",    "master_run_only": false },
              { "name": "deb-amd64",  "distro-name": "ubuntu1804",    "remote-machine-type": "ec2",    "master_run_only": false },
              { "name": "deb-amd64",  "distro-name": "ubuntu1604",    "remote-machine-type": "ec2",    "master_run_only": false },
              { "name": "deb-amd64",  "distro-name": "ubuntu1404",    "remote-machine-type": "docker", "master_run_only": false },
              { "name": "deb-amd64",  "distro-name": "debian10",      "remote-machine-type": "ec2",    "master_run_only": false },
              { "name": "deb-amd64",  "distro-name": "debian11",      "remote-machine-type": "docker", "master_run_only": false },
              { "name": "rpm-x86_64", "distro-name": "centos8",       "remote-machine-type": "docker", "master_run_only": false },
              { "name": "rpm-x86_64", "distro-name": "centos7",       "remote-machine-type": "ec2",    "master_run_only": false },
              { "name": "rpm-x86_64", "distro-name": "centos6",       "remote-machine-type": "docker", "master_run_only": false },
              { "name": "rpm-x86_64", "distro-name": "amazonlinux2",  "remote-machine-type": "ec2",    "master_run_only": false }
            ]

  # This job pre-executes and caches Runner steps that has to be executed in a separate job.
  # For example, we build platform-specific base docker images in a separate jobs to reduce overall build time, because
  # some of base images are built with using QEMU.
  pre-build-cached-step:
    name: ${{ matrix.name }}
    needs:
      - pre_job

    runs-on: ${{ matrix.os }}
    strategy:
      # This job receives its matrix from the 'pre_job' job. The matrix itself is created by the .github/actions/init-job-matrices action.
      # The matrix, for now, consists only from the 'include' part with following fields:
      #   "name": Name of the build job. (Not used in actiual build process, but just gives meaningful name to the job).
      #   "step-runner-fqdn": Fully qualified name of the builder class that has to run the cached step.
      #   "python-version": Version of python to setup on this runner. (NOTE: version of python used in images may differ, and it specified in the source code.)
      #   "os": Runner OS.
      matrix: ${{ fromJSON(needs.pre_job.outputs.pre_build_steps_matrix_json) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325 # v2.0.0
        with:
          driver-opts: network=host

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Run cached step
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: ${{ matrix.step-runner-fqdn }}


  build-images:
    name: Build image '${{ matrix.name }}'
    needs:
      - pre_job
      - pre-build-cached-step
    runs-on: ${{ matrix.os }}

    strategy:
      # This job receives its matrix from the 'pre_job' job. The matrix itself is created by the .github/actions/init-job-matrices action.
      # The matrix, for now, consists only from the 'include' part with following fields:
      #   "name": name of the builder that builds the target images.
      #   "master_run_only": If 'true' then it this package will be included only in a "master" workflow run.
      #
      #  The default values of these fields are generated by the .github/actions/init-job-matrices action, but they can be overwritten.
      #   "builder-fqdn": Fully qualified name of the builder to find its cached steps.
      #   "python-version": Version of python to set up on this runner. (NOTE: version of python used in images may differ, and it specified in the source code.)
      #   "os": Runner OS.
      matrix: ${{ fromJSON(needs.pre_job.outputs.agent_image_build_matrix_json) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325 # v2.0.0
        with:
          driver-opts: network=host

      - name: Prepare everything that is needed by image builder '${{ matrix.name }}'
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: ${{ matrix.builder-fqdn }}

      - name: Build image with builder '${{ matrix.name }}'
        run: |
          python3 build_package_new_refactored.py ${{ matrix.name }} \
            build --output-registry-dir /tmp/result

      - name: Save registry data root with result images as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}-registry
          path: /tmp/result
          retention-days: 1

  build-managed-packages:
    name: Build managed package ${{ matrix.name }}
    needs:
      - pre_job
    runs-on: ${{ matrix.os }}

    strategy:
      # This job receives its matrix from the 'pre_job' job. The matrix itself is created by the .github/actions/init-job-matrices action.
      # The matrix, for now, consists only from the 'include' part with following fields:
      #   "name": name of the builder that builds the target package.
      #   "master_run_only": If 'true' then it this package will be included only in a "master" workflow run.
      #
      #  The default values of these fields are generated by the .github/actions/init-job-matrices action, but they can be overwritten.
      #   "builder-fqdn": Fully qualified name of the builder to find its cached steps.
      #   "python-version": Version of python to set up on this runner.
      #   "os": Runner OS.
      matrix: ${{ fromJSON(needs.pre_job.outputs.managed_packages_build_matrix_json) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325 # v2.0.0
        with:
          driver-opts: network=host

      - name: Prepare environment.
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: "agent_build_refactored.__init__.BuildTestEnvironment"


      - name: Prepare everything that is needed by builder '${{ matrix.name }}'
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: ${{ matrix.builder-fqdn }}

      # Before we build needed packages, we check if the target repo already contains dependency
      # 'scalyr-agent-python3' and 'scalyr-agent-libs' packages. If there are such packages, then we reuse them
      # instead of building.
      #
      # First get last version package file names from repository.
      - name: Get last packages names from repo for the '${{ matrix.name }}'
        id: get_last_packages_names
        run: |
            set -e
            
            LAST_REPO_PYTHON_PACKAGE_NAME=$(
              python3 build_package_new_refactored.py ${{ matrix.name }} \
              find_last_repo_package \
              --user-name "${{ secrets.PACKAGE_CLOUD_USER }}" \
              --repo-name "${{ secrets.PACKAGE_CLOUD_INTERNAL_REPO }}" \
              --token ${{ secrets.PACKAGE_CLOUD_TOKEN }} \
              --package-name "scalyr-agent-python3"
            )
            
            LAST_REPO_AGENT_LIBS_PACKAGE_NAME=$(
              python3 build_package_new_refactored.py ${{ matrix.name }} \
              find_last_repo_package \
              --user-name "${{ secrets.PACKAGE_CLOUD_USER }}" \
              --repo-name "${{ secrets.PACKAGE_CLOUD_INTERNAL_REPO }}" \
              --token ${{ secrets.PACKAGE_CLOUD_TOKEN }} \
              --package-name "scalyr-agent-libs"
            )
          
            echo "last_repo_python_package_name=${LAST_REPO_PYTHON_PACKAGE_NAME}" >> $GITHUB_OUTPUT
            echo "last_repo_agent_libs_package_name=${LAST_REPO_AGENT_LIBS_PACKAGE_NAME}" >> $GITHUB_OUTPUT

      # Look for python package in cache, so we don't have to download it every time from the Packagecloud.
      - name: Cache last repo Python package.
        if: steps.get_last_packages_names.outputs.last_repo_python_package_name
        id: cache_python
        uses: actions/cache@v3
        with:
          path: /tmp/python-package
          key: python-package-${{ steps.get_last_packages_names.outputs.last_repo_python_package_name }}-${{ matrix.name }}-v1

      # Look for agent-libs package in cache, so we don't have to download it every time from the Packagecloud.
      - name: Cache last repo agent libs package.
        if: steps.get_last_packages_names.outputs.last_repo_agent_libs_package_name
        id: cache_agent_libs
        uses: actions/cache@v3
        with:
          path: /tmp/agent-libs-package
          key: agent-libs-package-${{ steps.get_last_packages_names.outputs.last_repo_agent_libs_package_name }}-${{ matrix.name }}-v1

      # If python package is not in cache, then we have to download it from the Packagecloud.
      - name: Download or use cached python package
        # if: steps.get_last_packages_names.outputs.last_repo_python_package_name && steps.cache_python.outputs.cache-hit != 'true'
        id: download_python
        run: |
            set -e 
            if [ -n "${{ steps.get_last_packages_names.outputs.last_repo_python_package_name }}" ] && [ "${{ steps.cache_python.outputs.cache-hit }}" != "true" ]; then
              LAST_REPO_PYTHON_PACKAGE_PATH=$(
                python3 build_package_new_refactored.py ${{ matrix.name }} \
                download_package \
                --user-name "${{ secrets.PACKAGE_CLOUD_USER }}" \
                --repo-name "${{ secrets.PACKAGE_CLOUD_INTERNAL_REPO }}" \
                --token ${{ secrets.PACKAGE_CLOUD_TOKEN }} \
                --package-filename "${{ steps.get_last_packages_names.outputs.last_repo_python_package_name }}" \
                --output-dir /tmp/python-package
              )
              echo "::notice::Re-using downloaded python package from the Packagecloud."
            elif [ -n "${{ steps.get_last_packages_names.outputs.last_repo_python_package_name }}" ]; then
              LAST_REPO_PYTHON_PACKAGE_PATH="/tmp/python-package/${{ steps.get_last_packages_names.outputs.last_repo_python_package_name }}"
              echo "::notice::Re-using python package from cache."
            else
              echo "::notice::No python packages to reuse."
            fi
              
            
            echo "last_repo_python_package_path=${LAST_REPO_PYTHON_PACKAGE_PATH}" >> $GITHUB_OUTPUT

      # If agent-lib package is not in cache, then we have to download it from the Packagecloud.
      - name: Download or use cached agent libs package
        #if: steps.get_last_packages_names.outputs.last_repo_agent_libs_package_name && steps.cache_agent_libs.outputs.cache-hit != 'true'
        id: download_agent_libs
        run: |
            set -e
            if [ -n "${{ steps.get_last_packages_names.outputs.last_repo_agent_libs_package_name }}" ] && [ "${{ steps.cache_agent_libs.outputs.cache-hit }}" != "true" ]; then
              LAST_REPO_AGENT_LIBS_PACKAGE_PATH=$(
                python3 build_package_new_refactored.py ${{ matrix.name }} \
                download_package \
                --user-name "${{ secrets.PACKAGE_CLOUD_USER }}" \
                --repo-name "${{ secrets.PACKAGE_CLOUD_INTERNAL_REPO }}" \
                --token ${{ secrets.PACKAGE_CLOUD_TOKEN }} \
                --package-filename "${{ steps.get_last_packages_names.outputs.last_repo_agent_libs_package_name }}" \
                --output-dir /tmp/agent-libs-package
              )
              echo "::notice::Re-using downloaded agent-libs package from the Packagecloud."
            elif [ -n "${{ steps.get_last_packages_names.outputs.last_repo_agent_libs_package_name }}" ]; then
              LAST_REPO_AGENT_LIBS_PACKAGE_PATH="/tmp/agent-libs-package/${{ steps.get_last_packages_names.outputs.last_repo_agent_libs_package_name }}"
              echo "::notice::Re-using agent-libs package from cache."
            else
              echo "::notice::No agent-libs packages to reuse."
            fi
          
            echo "last_repo_agent_libs_package_path=${LAST_REPO_AGENT_LIBS_PACKAGE_PATH}" >> $GITHUB_OUTPUT

      # Finally build the packages. We also specify already pre-downloaded dependency 'python' and 'agent-libs' packages
      # to reuse them instead of building if they are not changed.
      - name: Build managed package with builder '${{ matrix.name }}'
        run: |
            
            echo "Changing build version to ${{ needs.pre_job.outputs.version }}"
            echo "${{ needs.pre_job.outputs.version }}" > VERSION
          
            echo "${{ steps.download_python.outputs.last_repo_python_package_path }}"
            echo "${{ steps.download_agent_libs.outputs.last_repo_agent_libs_package_path }}"
            python3 build_package_new_refactored.py ${{ matrix.name }} \
              build \
              --last-repo-python-package-file "${{ steps.download_python.outputs.last_repo_python_package_path }}" \
              --last-repo-agent-libs-package-file "${{ steps.download_agent_libs.outputs.last_repo_agent_libs_package_path }}"
          

      - name: Save packages as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}-packages
          path: build
          retention-days: 1

  test_managed_packages:
    name: Test package on ${{ matrix.distro-name }}-${{ matrix.remote-machine-type }}, ${{ matrix.name }}
    needs:
      - pre_job
      - build-managed-packages

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # This job receives its matrix from the 'pre_job' job. The matrix itself is created by the .github/actions/init-job-matrices action.
      # The matrix, for now, consists only from the 'include' part with following fields:
      #   "name": name of the builder that builds the target packages.
      #   "master_run_only": If 'true' then it this package will be included only in a "master" workflow run.
      #
      #  The default values of these fields are generated by the .github/actions/init-job-matrices action, but they can be overwritten.
      #   "builder-fqdn": Fully qualified name of the builder to find its cached steps.
      #   "python-version": Version of python to set up on this runner.
      #   "os": Runner OS.
      matrix: ${{ fromJSON(needs.pre_job.outputs.managed_packages_test_matrix_json) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325 # v2.0.0
        with:
          driver-opts: network=host


      - name: Prepare environment.
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: "agent_build_refactored.__init__.BuildTestEnvironment"

      - name: Download built packages.
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.name }}-packages
          path: /tmp/packages

      - name: Prepare everything that is needed by builder '${{ matrix.name }}'
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: ${{ matrix.builder-fqdn }}

      - name: Test '${{ matrix.name }}' packages
        run: |
          
          echo "Changing build version to ${{ needs.pre_job.outputs.version }}"
          echo "${{ needs.pre_job.outputs.version }}" > VERSION
          
          echo "${{ secrets.AWS_DEV_US_EAST_1_KEYPAIR_NAME }}" > /tmp/private_key.pem
          chmod 600 /tmp/private_key.pem
          
          python3 -m pytest tests/end_to_end_tests/managed_packages_tests \
            -s \
            --builder-name ${{ matrix.name }} \
            --distro-name ${{ matrix.distro-name }} \
            --remote-machine-type ${{ matrix.remote-machine-type }} \
            --packages-source-type dir \
            --packages-source /tmp/packages \
            --scalyr-api-key ${{ secrets.SCALYR_API_KEY }} \
            --scalyr-api-read-key ${{ secrets.SCALYR_READ_API_KEY }} \
            --test-session-suffix ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }} \
            --aws-access-key "${{ secrets.SCALYR_CLOUDTECH_TESTING_DEV_AWS_ACCESS_KEY }}" \
            --aws-secret-key "${{ secrets.SCALYR_CLOUDTECH_TESTING_DEV_AWS_ACCESS_SECRET }}" \
            --aws-private-key-path "/tmp/private_key.pem" \
            --aws-private-key-name "arthur-dev3"  \
            --aws-region "us-east-1" \
            --aws-security-group "github-actions-remote-access" \
            --aws-security-groups-prefix-list-id "${{ secrets.AWS_SECURITY_GROUPS_NAMED_PREFIX_ID }}"


  publish-managed-packages:
    name: Publish managed package ${{ matrix.name }}
    if: needs.pre_job.outputs.to_publish == 'true'
    needs:
      - pre_job
      - build-managed-packages
      #- pre-build-cached-step
    runs-on: ${{ matrix.os }}

    strategy:
      # This job receives its matrix from the 'pre_job' job. The matrix itself is created by the .github/actions/init-job-matrices action.
      # The matrix, for now, consists only from the 'include' part with following fields:
      #   "name": name of the builder that builds the target packages.
      #   "master_run_only": If 'true' then it this package will be included only in a "master" workflow run.
      #
      #  The default values of these fields are generated by the .github/actions/init-job-matrices action, but they can be overwritten.
      #   "builder-fqdn": Fully qualified name of the builder to find its cached steps.
      #   "python-version": Version of python to set up on this runner.
      #   "os": Runner OS.
      matrix: ${{ fromJSON(needs.pre_job.outputs.managed_packages_build_matrix_json) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download built packages.
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.name }}-packages
          path: /tmp/packages

      - name: Prepare everything that is needed by builder '${{ matrix.name }}'
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: ${{ matrix.builder-fqdn }}

      - name: Publish '${{ matrix.name }}' dev packages
        run: |
          python3 build_package_new_refactored.py ${{ matrix.name }} \
            publish \
            --user-name "${{ secrets.PACKAGE_CLOUD_USER }}" \
            --repo-name "${{ secrets.PACKAGE_CLOUD_INTERNAL_REPO }}" \
            --token ${{ secrets.PACKAGE_CLOUD_TOKEN }} \
            --packages-dir /tmp/packages

      - name: Publish '${{ matrix.name }}' production packages
        if: needs.pre_job.outputs.is_production == 'true'
        run: |
          python3 build_package_new_refactored.py ${{ matrix.name }} \
            publish \
            --user-name "${{ secrets.PACKAGE_CLOUD_USER }}" \
            --repo-name "${{ secrets.PACKAGE_CLOUD_INTERNAL_REPO }}" \
            --token ${{ secrets.PACKAGE_CLOUD_TOKEN }} \
            --packages-dir /tmp/packages
          

  clean-ec2-tests-objects:
    name: Remove ec2 test workflow prefix list entries
    if: ${{ always() }}
    needs:
      - pre_job
      - test_managed_packages
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8.13"

      - name: Prepare environment.
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: "agent_build_refactored.__init__.BuildTestEnvironment"

      - name: Cleanup old prefix lists for ec2 test security group.
        run: |
          python3 tests/end_to_end_tests/run_in_remote_machine/cleanup_test_ec2_objects.py \
            --access-key "${{ secrets.SCALYR_CLOUDTECH_TESTING_DEV_AWS_ACCESS_KEY }}" \
            --secret-key "${{ secrets.SCALYR_CLOUDTECH_TESTING_DEV_AWS_ACCESS_SECRET }}" \
            --prefix-list-id "${{ secrets.AWS_SECURITY_GROUPS_NAMED_PREFIX_ID }}" \
            --region "us-east-1" \
            --workflow-id ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}