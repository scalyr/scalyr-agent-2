name: "Kubernetes End to End Tests"

on:
  push:
    branches:
      - master
      - k8s_om_monitor_e2e_tests
  pull_request:
    branches:
      - master
  schedule:
    - cron: '0 4 * * *'

jobs:
  # Special job which automatically cancels old runs for the same branch, prevents runs for the
  # same file set which has already passed, etc.
  pre_job:
    name: Skip Duplicate Jobs Pre Job
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@f75dd6564bb646f95277dc8c3b80612e46a4a1ea # v3.4.1
        with:
          cancel_others: 'true'
          github_token: ${{ github.token }}

  k8s_open_metrics_monitor_tests:
    name: OpenMetrics Monitor - k8s ${{ matrix.k8s_version }}
    runs-on: ubuntu-latest
    timeout-minutes: 15

    needs: pre_job
    # NOTE: We always want to run job on master branch
    if: ${{ needs.pre_job.outputs.should_skip != 'true' || github.ref == 'refs/heads/master' }}

    strategy:
      fail-fast: false
      matrix:
        k8s_version:
          - 'v1.17.2'
          - 'v1.20.15'
          - 'v1.22.2'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        id: setup-python
        with:
          python-version: 3.8

      - name: Install Scalyr tool
        run: |
          curl https://raw.githubusercontent.com/scalyr/scalyr-tool/master/scalyr > scalyr
          chmod +x scalyr
          sudo mv scalyr /usr/local/bin

      - name: Setup minikube k8s cluster
        uses: ./.github/actions/setup-minikube-cluster/
        with:
          k8s_version: "${{ matrix.k8s_version }}"
          github_token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Build Agent k8s Docker Image
        run: |
          # python3 build_package_new.py k8s-debian --tag "local_k8s_image" --platforms linux/amd64
          docker image ls

      # Here we build the dummy Java app image which exposes JMX metrics via exporter
      - name: Build Test Java App Docker Image
        run: |
          pushd tests/e2e/k8s_om_monitor/java-hello-world
          docker build -t java-hello-world .
          popd

          docker image ls

      # Create mock pods and exporters which will be scrapped by the monitor
      - name: Create mock pods and exporters
        run: |
          kubectl create namespace monitoring

          # 1. node exporter pod
          kubectl apply -f tests/e2e/k8s_om_monitor/node_exporter.yaml

          # 2. kube state metrics deployment
          kubectl apply -k tests/e2e/k8s_om_monitor/kube-state-metrics/

          # 3. Install dummy java app container with jmx exporter side
          kubectl apply -f tests/e2e/k8s_om_monitor/java_app_deployment.yaml

          sleep 20
          kubectl get pods -A

      - name: Create scalyr-agent-2 daemonset
        run: |
          export NODE_NAME=$(kubectl get nodes -o jsonpath="{.items[0].metadata.name}")
          echo "NODE_NAME=${NODE_NAME}" >> ${GITHUB_ENV}
          echo "Using node name: ${NODE_NAME}"

          export K8S_CLUSTER_NAME="ci-agent-e2e-k8s-om-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          echo "K8S_CLUSTER_NAME=${K8S_CLUSTER_NAME}" >> ${GITHUB_ENV}
          echo "Using cluster name: ${K8S_CLUSTER_NAME}"

          # Create namespace
          kubectl create namespace scalyr

          # Create service account
          kubectl apply -f k8s/no-kustomize/scalyr-service-account.yaml

          # Define api key
          kubectl create secret generic scalyr-api-key --namespace scalyr --from-literal=scalyr-api-key="${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}"

          # Create configmap
          kubectl create configmap --namespace scalyr scalyr-config \
            --from-literal=SCALYR_K8S_CLUSTER_NAME="${K8S_CLUSTER_NAME}" \
            --from-literal=SCALYR_K8S_EVENTS_DISABLE="true" \
            --from-literal=SCALYR_K8S_VERIFY_KUBELET_QUERIES="false" \
            --from-literal=SCALYR_SERVER="agent.scalyr.com"

          # Create extra-d configmap
          # Monitor is not enabled by default yet since it's still in preview and testing phase so
          # we expliticly enable it here
          kubectl apply -f tests/e2e/k8s_om_monitor/scalyr-agent-extra-config-configmap.yaml

          # Create daemonset
          kubectl apply -f tests/e2e/k8s_om_monitor/scalyr-agent-2-daemonset.yaml

          sleep 60
          kubectl -n scalyr get event
          kubectl -n scalyr get serviceaccount
          kubectl -n scalyr get pods

          export SCALYR_AGENT_POD_NAME=$(kubectl get pod --namespace=scalyr --selector=app=scalyr-agent-2 -o jsonpath="{.items[0].metadata.name}")
          echo "SCALYR_AGENT_POD_NAME=${SCALYR_AGENT_POD_NAME}" >> ${GITHUB_ENV}
          echo "Using scalyr agent pod name: ${SCALYR_AGENT_POD_NAME}"

          echo "Agent pod logs (${SCALYR_AGENT_POD_NAME})"
          kubectl logs -n scalyr "${SCALYR_AGENT_POD_NAME}"

      - name: Verify data has been ingested
        timeout-minutes: 8
        env:
          # Needed for scalyr-tool
          scalyr_readlog_token: "${{ secrets.SCALYR_CLOUDTECH_TESTING_DEV_SCALYR_READ_API_KEY }}"
          SCALYR_AGENT_POD_NAME: "${{ env.SCALYR_AGENT_POD_NAME }}"
          NODE_NAME: "${{ env.NODE_NAME }}"
        run: |
          export RETRY_ATTEMPTS="5"
          export SLEEP_DELAY="10"

          # Verify agent is running
          echo "Agent running checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Starting scalyr agent..."'

          # Verify monitor is running
          echo "Monitoring running checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Found 3 URL(s) to scrape for node"'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "There are currently 3 dynamic and 2 static open metrics monitors running"'
          echo ""

          # Kubernetes API metrics (static monitor)
          echo "Kubernetes API metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${NODE_NAME}'-kubernetes-api-metrics.log" "process_max_fds 1000000 node=\"'${NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${NODE_NAME}'-kubernetes-api-metrics.log" "process_open_fds "'

          # Kubernetes API cAdvisor metrics (static monitor)
          echo "Kubernetes API cAdvisor metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${NODE_NAME}'-kubernetes-api-cadvisor-metrics" "machine_cpu_cores 2"'
          MINIMUM_RESULTS=2 ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${NODE_NAME}'-kubernetes-api-cadvisor-metrics" "container_cpu_load_average_10s "'

          # 2. Verify node exporter metrics
          echo "Node exporter metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${NODE_NAME}'-node-exporter-" "process_max_fds "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${NODE_NAME}'-node-exporter-" "process_open_fds "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${NODE_NAME}'-node-exporter-" "node_vmstat_pswpin 0 node=\"'${NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${NODE_NAME}'-node-exporter-" "node_vmstat_pswpout 0 node=\"'${NODE_NAME}'\""'

          # 3. Verify kube state event metrics
          echo "Kube state events metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${NODE_NAME}'" $logfile contains "kube-state-metrics" "kube_storageclass_labels 1 node=\"'${NODE_NAME}'\" storageclass=\"standard\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${NODE_NAME}'" $logfile contains "kube-state-metrics" "kube_secret_type 1 namespace=\"scalyr\" node=\"'${NODE_NAME}'\" secret=\"scalyr-api-key\" type=\"Opaque\""'

          # 4. Verify java app JMX metrics
          echo "Java JMX metrics events metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${NODE_NAME}'" $logfile contains "java-hello-world" "jmx_scrape_error 0.0 node=\"'${NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${NODE_NAME}'" $logfile contains "java-hello-world" "jmx_scrape_cached_beans 0.0 node=\"'${NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${NODE_NAME}'" $logfile contains "java-hello-world" "jvm_info 1.0 node=\"'${NODE_NAME}'\" runtime="'

      - name: Notify Slack on Failure
        # NOTE: github.ref is set to pr ref (and not branch name, e.g. refs/pull/28/merge) for pull
        # requests and that's why we need this special conditional and check for github.head_ref in
        # case of PRs
        if: ${{ failure() && (github.ref == 'refs/heads/master' || github.head_ref == 'master') }}
        uses: act10ns/slack@e4e71685b9b239384b0f676a63c32367f59c2522 # v1.2.2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#cloud-tech'
