name: "Kubernetes End to End Tests"

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: '0 4 * * *'

permissions:
  contents: read

jobs:
  # Special job which automatically cancels old runs for the same branch, prevents runs for the
  # same file set which has already passed, etc.
  pre_job:
    name: Skip Duplicate Jobs Pre Job
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@f75dd6564bb646f95277dc8c3b80612e46a4a1ea # v3.4.1
        with:
          cancel_others: 'true'
          github_token: ${{ github.token }}

  # Jobs which performs basic sanity checks for the Kubernetes Monitor and Kubernetes Events Monitor
  k8s_kubernetes_monitor_tests:
    name: Kubernetes Monitors - k8s ${{ matrix.k8s_version.version }}-${{ matrix.k8s_version.runtime}}
    runs-on: ubuntu-latest
    timeout-minutes: 15

    needs: pre_job
    # NOTE: We always want to run job on master branch
    if: ${{ needs.pre_job.outputs.should_skip != 'true' || github.ref == 'refs/heads/master' }}

    strategy:
      fail-fast: false
      matrix:
        k8s_version:
          - { "version": "v1.17.17", "driver": "", "runtime": "docker" }
          - { "version": "v1.20.15", "driver": "", "runtime": "docker" }
          - { "version": "v1.21.10", "driver": "", "runtime": "docker" }
          - { "version": "v1.22.7", "driver": "", "runtime": "docker" }
          # NOTE: Using containerd runtime in minikube on  GHA only works with docker driver
          - { "version": "v1.23.4", "driver": "docker", "runtime": "containerd" }

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        id: setup-python
        with:
          python-version: 3.8

      - name: Install Scalyr tool
        run: |
          curl https://raw.githubusercontent.com/scalyr/scalyr-tool/master/scalyr > scalyr
          chmod +x scalyr
          sudo mv scalyr /usr/local/bin

      - name: Setup minikube k8s cluster
        uses: ./.github/actions/setup-minikube-cluster/
        with:
          k8s_version: "${{ matrix.k8s_version.version }}"
          minikube_driver: "${{ matrix.k8s_version.driver }}"
          container_runtime: "${{ matrix.k8s_version.runtime }}"
          github_token: "${{ secrets.GITHUB_TOKEN }}"

      # TODO: Build image as a first job in the workflow and then re-use that image for other jobs
      # to speed up the build and reduce number of redundant builds.
      - name: Build Agent k8s Docker Image
        run: |
          python3 build_package_new.py k8s-debian --tag "local_k8s_image" --platforms linux/amd64
          docker image ls

          # Needed for containerd runtime
          if [ "${{ matrix.k8s_version.runtime }}" = "containerd" ]; then
            minikube image load scalyr-k8s-agent:local_k8s_image
          fi

      # Here we build the dummy container which continously prints data to stdout and stderr
      - name: Build Dummy App Docker Image
        run: |
          docker build -f docker/Dockerfile.docker_monitor_testing_config -t std-printer scripts/
          docker image ls

          # Needed for containerd runtime
          if [ "${{ matrix.k8s_version.runtime }}" = "containerd" ]; then
            minikube image load std-printer:latest
          fi

      # Create pod for our mock std printer container which logs will be ingested by the agent
      - name: Create mock pod
        run: |
          kubectl apply -f tests/e2e/k8s_k8s_monitor/std_printer_deployment.yaml

          sleep 10
          kubectl get pods -A

          export APP_POD_NAME=$(kubectl get pod --namespace=default --selector=app=std-printer -o jsonpath="{.items[0].metadata.name}")
          echo "APP_POD_NAME=${APP_POD_NAME}" >> ${GITHUB_ENV}
          echo "APP_POD_NAME=${APP_POD_NAME}"

          echo ""
          kubectl logs "${APP_POD_NAME}"
          echo ""

      - name: Create scalyr-agent-2 daemonset
        uses: ./.github/actions/install-k8s-agent-daemonset/
        with:
          scalyr_server: "agent.scalyr.com"
          scalyr_api_key: "${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}"
          scalyr_cluster_name: "${K8S_CLUSTER_NAME}"
          scalyr_k8s_events_disable: "false"
          daemonset_yaml_path: "tests/e2e/scalyr-agent-2-daemonset.yaml"

      - name: Verify data has been ingested
        timeout-minutes: 5
        env:
          # Needed for scalyr-tool
          scalyr_readlog_token: "${{ secrets.SCALYR_CLOUDTECH_TESTING_DEV_SCALYR_READ_API_KEY }}"
          SCALYR_AGENT_POD_NAME: "${{ env.SCALYR_AGENT_POD_NAME }}"
          K8S_NODE_NAME: "${{ env.K8S_NODE_NAME }}"
        run: |
          export RETRY_ATTEMPTS="10"
          export SLEEP_DELAY="10"

          # Verify agent is running
          echo "Agent running checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Starting scalyr agent..."'

          # Verify Kubernetes monitor is running
          echo "Kubernetes Monitor running checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "kubernetes_monitor parameters: ignoring namespaces: "'
          echo ""

          # Verify Kubernetes events monitor is running
          echo "Kubernetes events monitor running checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Starting monitor kubernetes_events_monitor"'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Acting as Kubernetes event leader"'
          echo ""

          # Verify initial std-printer pod data has been ingested

          # 1. First we want for some data to be ingested using "log.config.scalyr.com/attributes.parser"
          # annotation set as part of the deployment YAML.
          # After a while, we change that dynamically using kubectl and verify that this change has
          # been correctly picked up by the agent.
          sleep 20

          echo "Initial pod ingested data checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" app="std-printer" parser="test-parser-1" stream="stdout" "stdout: line 2"'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" app="std-printer" parser="test-parser-1" stream="stderr" "stderr: line 2"'
          echo ""

          kubectl describe pod ${APP_POD_NAME}
          kubectl annotate --overwrite pods ${APP_POD_NAME} log.config.scalyr.com/attributes.parser="changed"
          kubectl describe pod ${APP_POD_NAME}

          # Give agent some time to pick up the annotation change (by default we poll every 30 seconds
          # for pod metadata changes, but we use lower value for the tests)
          sleep 15

          echo ""
          echo "Post annotation change data checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" app="std-printer" parser="changed" stream="stdout" "stdout: line"'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" app="std-printer" parser="changed" stream="stderr" "stderr: line"'
          echo ""

          # Verify Kubernetes Events Monitor events are ingested
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_events.log" "\"kind\":\"Event\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_events.log" "\"kind\":\"Pod\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_events.log" "involvedObject"'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_events.log" "NodeReady"'

      - name: Notify Slack on Failure
        # NOTE: github.ref is set to pr ref (and not branch name, e.g. refs/pull/28/merge) for pull
        # requests and that's why we need this special conditional and check for github.head_ref in
        # case of PRs
        if: ${{ failure() && (github.ref == 'refs/heads/master' || github.head_ref == 'master') }}
        uses: act10ns/slack@e4e71685b9b239384b0f676a63c32367f59c2522 # v1.2.2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#cloud-tech'

  k8s_open_metrics_monitor_tests:
    name: OpenMetrics Monitor - k8s ${{ matrix.k8s_version.version }}-${{ matrix.k8s_version.runtime}}
    runs-on: ubuntu-latest
    timeout-minutes: 15

    needs: pre_job
    # NOTE: We always want to run job on master branch
    if: ${{ needs.pre_job.outputs.should_skip != 'true' || github.ref == 'refs/heads/master' }}

    strategy:
      fail-fast: false
      matrix:
        k8s_version:
          - { "version": "v1.17.17", "driver": "", "runtime": "docker" }
          - { "version": "v1.20.15", "driver": "", "runtime": "docker" }
          - { "version": "v1.21.10", "driver": "", "runtime": "docker" }
          - { "version": "v1.22.7", "driver": "", "runtime": "docker" }
          # NOTE: Using containerd runtime in minikube on  GHA only works with docker driver
          - { "version": "v1.23.4", "driver": "docker", "runtime": "containerd" }

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        id: setup-python
        with:
          python-version: 3.8

      - name: Install Scalyr tool
        run: |
          curl https://raw.githubusercontent.com/scalyr/scalyr-tool/master/scalyr > scalyr
          chmod +x scalyr
          sudo mv scalyr /usr/local/bin

      - name: Setup minikube k8s cluster
        uses: ./.github/actions/setup-minikube-cluster/
        with:
          k8s_version: "${{ matrix.k8s_version.version }}"
          minikube_driver: "${{ matrix.k8s_version.driver }}"
          container_runtime: "${{ matrix.k8s_version.runtime }}"
          github_token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Build Agent k8s Docker Image
        run: |
          python3 build_package_new.py k8s-debian --tag "local_k8s_image" --platforms linux/amd64
          docker image ls

          # Needed for containerd runtime
          if [ "${{ matrix.k8s_version.runtime }}" = "containerd" ]; then
            minikube image load scalyr-k8s-agent:local_k8s_image
          fi

      # Here we build the dummy Java app image which exposes JMX metrics via exporter
      - name: Build Test Java App Docker Image
        run: |
          pushd tests/e2e/k8s_om_monitor/java-hello-world
          docker build -t java-hello-world .
          popd

          docker image ls

          # Needed for containerd runtime
          if [ "${{ matrix.k8s_version.runtime }}" = "containerd" ]; then
            minikube image load java-hello-world:latest
          fi

      # Create mock pods and exporters which will be scrapped by the monitor
      - name: Create mock pods and exporters
        run: |
          kubectl create namespace monitoring

          # 1. node exporter pod
          kubectl apply -f tests/e2e/k8s_om_monitor/node_exporter.yaml

          # 2. kube state metrics deployment
          kubectl apply -k tests/e2e/k8s_om_monitor/kube-state-metrics/

          # 3. Install dummy java app container with jmx exporter side
          kubectl apply -f tests/e2e/k8s_om_monitor/java_app_deployment.yaml

          sleep 20
          kubectl get pods -A

      - name: Create scalyr-agent-2 daemonset
        uses: ./.github/actions/install-k8s-agent-daemonset/
        with:
          scalyr_server: "agent.scalyr.com"
          scalyr_api_key: "${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}"
          scalyr_cluster_name: "${K8S_CLUSTER_NAME}"
          daemonset_yaml_path: "tests/e2e/k8s_om_monitor/scalyr-agent-2-daemonset.yaml"
          # Monitor is not enabled by default yet since it's still in preview and testing phase so
          # we expliticly enable it here
          extra_yaml_paths: "tests/e2e/k8s_om_monitor/scalyr-agent-extra-config-configmap.yaml"

      - name: Verify data has been ingested
        timeout-minutes: 8
        env:
          # Needed for scalyr-tool
          scalyr_readlog_token: "${{ secrets.SCALYR_CLOUDTECH_TESTING_DEV_SCALYR_READ_API_KEY }}"
          SCALYR_AGENT_POD_NAME: "${{ env.SCALYR_AGENT_POD_NAME }}"
          K8S_NODE_NAME: "${{ env.K8S_NODE_NAME }}"
          K8S_CLUSTER_NAME: "${{ env.K8S_CLUSTER_NAME }}"
        run: |
          export RETRY_ATTEMPTS="8"
          export SLEEP_DELAY="10"

          # Verify agent is running
          echo "Agent running checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Starting scalyr agent..."'

          # Verify monitor is running
          echo "Monitor running checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Found 3 URL(s) to scrape for node"'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "There are currently 3 dynamic and 2 static open metrics monitors running"'
          echo ""

          # Kubernetes API metrics (static monitor)
          echo "Kubernetes API metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-kubernetes-api-metrics.log" "process_max_fds 1000000 k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-kubernetes-api-metrics.log" "process_open_fds "'

          # Kubernetes API cAdvisor metrics (static monitor)
          echo "Kubernetes API cAdvisor metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-kubernetes-api-cadvisor-metrics" "machine_cpu_cores 2"'
          MINIMUM_RESULTS=2 ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-kubernetes-api-cadvisor-metrics" "container_cpu_load_average_10s "'

          # 2. Verify node exporter metrics
          echo "Node exporter metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-node-exporter-" "process_max_fds "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-node-exporter-" "process_open_fds "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-node-exporter-" "node_vmstat_pswpin "'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'-node-exporter-" "node_vmstat_pswpout "'

          # 3. Verify kube state event metrics
          echo "Kube state events metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "kube-state-metrics" "kube_storageclass_labels 1 k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\" storageclass=\"standard\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "kube-state-metrics" "kube_secret_type 1 k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\" namespace=\"scalyr\" secret=\"scalyr-api-key\" type=\"Opaque\""'

          # 4. Verify java app JMX metrics
          echo "Java JMX metrics events metrics monitor checks"
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "java-hello-world" "jmx_scrape_error 0.0 app=\"java-hello-world\" app_instance=\"java-hello-world-1\" attribute1=\"value1\" k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "java-hello-world" "jmx_scrape_cached_beans 0.0 app=\"java-hello-world\" app_instance=\"java-hello-world-1\" attribute1=\"value1\" k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "java-hello-world" "jvm_info 1.0 app=\"java-hello-world\" app_instance=\"java-hello-world-1\" attribute1=\"value1\" k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\" runtime="'

          # Client side calculated per second rate metrics
          # NOTE: There is no easy way to assert on the actual rate metric value here (we have unit tests for that)
          # so we just assert that the metric is present.
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "java-hello-world" "jvm_threads_started_total_rate" "app=\"java-hello-world\" app_instance=\"java-hello-world-1\" attribute1=\"value1\" k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "java-hello-world" "jvm_memory_pool_allocated_bytes_total_rate" "app=\"java-hello-world\" app_instance=\"java-hello-world-1\" attribute1=\"value1\" k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\""'
          ./scripts/cicd/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "openmetrics_monitor-'${K8S_NODE_NAME}'" $logfile contains "java-hello-world" "process_cpu_seconds_total_rate" "app=\"java-hello-world\" app_instance=\"java-hello-world-1\" attribute1=\"value1\" k8s-cluster=\"'${K8S_CLUSTER_NAME}'\" k8s-node=\"'${K8S_NODE_NAME}'\""'

      - name: Notify Slack on Failure
        # NOTE: github.ref is set to pr ref (and not branch name, e.g. refs/pull/28/merge) for pull
        # requests and that's why we need this special conditional and check for github.head_ref in
        # case of PRs
        if: ${{ failure() && (github.ref == 'refs/heads/master' || github.head_ref == 'master') }}
        uses: act10ns/slack@e4e71685b9b239384b0f676a63c32367f59c2522 # v1.2.2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#cloud-tech'
