name: Agent Linux Packages Build Refactored

on:
  workflow_call:
    inputs:
      python_version:
        description: "Version of Python to use."
        type: string

      cache_version:
        description: "Version suffix for the cache key. May be useful when it is needed to invalidate the cache."
        type: string

      aws_region:
        description: "AWS region for remote builds."
        type: string

      aws_private_key_name:
        description: "Name of a private key that is used to connect to AWS EC2 instances that will be created by this workflow."
        type: string

      cicd_workflow:
        description: "Additional string that has to differentiate AWS object from another workflows."
        type: string

    outputs:
      cache_miss:
        description: "Flag that indicates that packages are can not be build by using cache."
        value: ${{ jobs.build_packages.outputs.cache_miss }}


    secrets:
      CT_AWS_DEV_EC2_PRIVATE_KEY:
        required: true
      CT_AWS_DEV_EC2_ACCESS_KEY:
        required: true
      CT_AWS_DEV_EC2_SECRET_KEY:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ:
        required: true

env:
  DOCKER_BUILDKIT: 1
  # Set this variable to tell the agent build code that it runs in CI/CD and it needs to use caching.
  AGENT_BUILD_IN_CICD: "1"

# This job skips another workflows with identical content and also generates strategy matrices for all further jobs.
# Since we can do a "master" run (on push and PR to a master branch) and "non-master" run, it generates matrices with different
#  size according to that information.
jobs:
  build_dependencies:
    name: Build dependencies ${{ matrix.builder.name }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        builder:
          - { "name": "aio-aarch64" }
          - { "name": "aio-x86_64" }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: install python and requirements
        uses: ./.github/actions/install_python_and_requirements
        with:
          python_version: ${{ inputs.python_version }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2.0.0
        with:
          driver-opts: network=host

      - name: Expose GitHub Runtime To Be Able to Use GHA Cache By Docker.
        uses: crazy-max/ghaction-github-runtime@715c25b40ccc0df9b62bfa8be3ccc57d09dbc4b1

      - name: Build Dependencies
        shell: bash
        id: build
        env:
          AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
          AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
          AWS_PRIVATE_KEY_PATH: "/tmp/private_key.pem"
          AWS_REGION: ${{ inputs.aws_region }}
          USE_GHA_CACHE: "1"
          ALLOW_FALLBACK_TO_REMOTE_BUILDER: "1"
          CACHE_VERSION: ${{ inputs.cache_version }}
          CICD_WORKFLOW: ${{ inputs.cicd_workflow }}
          CICD_JOB: ${{ matrix.builder.name }}
        run: |
          echo "${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}" > "${AWS_PRIVATE_KEY_PATH}"
          chmod 600 "${AWS_PRIVATE_KEY_PATH}"
          
          python3 build_package_new.py package ${{ matrix.builder.name }} build-dependencies

  build_packages:
    name: Build package ${{ matrix.variant.builder_name }}-${{ matrix.variant.package_type }}
    runs-on: ubuntu-22.04
    needs:
      - build_dependencies
    strategy:
      matrix:
        variant:
          - { "builder_name": "aio-x86_64",  "package_type": "deb" }
          - { "builder_name": "aio-x86_64",  "package_type": "rpm" }
          - { "builder_name": "aio-aarch64", "package_type": "deb" }
          - { "builder_name": "aio-aarch64", "package_type": "rpm" }
          - { "builder_name": "non-aio",     "package_type": "deb" }
          - { "builder_name": "non-aio",     "package_type": "rpm" }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: install python and requirements
        uses: ./.github/actions/install_python_and_requirements
        with:
          python_version: ${{ inputs.python_version }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2.0.0
        with:
          driver-opts: network=host

      - name: Expose GitHub Runtime To Be Able to Use GHA Cache By Docker.
        uses: crazy-max/ghaction-github-runtime@715c25b40ccc0df9b62bfa8be3ccc57d09dbc4b1

      - name: Build package
        shell: bash
        id: build
        env:
          USE_GHA_CACHE: "1"
          CACHE_VERSION: ${{ inputs.cache_version }}
        run: |
          python3 build_package_new.py package ${{ matrix.variant.builder_name }} build \
            --package-type ${{ matrix.variant.package_type }}

      - name: Save packages as artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-packages-${{ matrix.variant.builder_name }}
          path: build
          retention-days: 1

  test_packages:
    name: Test package on ${{ matrix.test_target.distro-name }}-${{ matrix.test_target.remote-machine-type }}, ${{ matrix.test_target.builder }}
    if: github.ref_name != '_release_build'
    needs:
      - build_packages

    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        test_target:
          - { "package_type": "deb", "builder": "aio-x86_64",  "arch": "x86_64", "distro-name": "ubuntu2204",    "remote-machine-type": "ec2"    }
          - { "package_type": "deb", "builder": "aio-x86_64",  "arch": "x86_64", "distro-name": "ubuntu2004",    "remote-machine-type": "ec2"    }
          - { "package_type": "deb", "builder": "aio-x86_64",  "arch": "x86_64", "distro-name": "ubuntu1804",    "remote-machine-type": "ec2"    }
          - { "package_type": "deb", "builder": "aio-x86_64",  "arch": "x86_64", "distro-name": "ubuntu1604",    "remote-machine-type": "ec2"    }
          - { "package_type": "deb", "builder": "aio-x86_64",  "arch": "x86_64", "distro-name": "ubuntu1404",    "remote-machine-type": "docker" }
          - { "package_type": "deb", "builder": "aio-x86_64",  "arch": "x86_64", "distro-name": "debian10",      "remote-machine-type": "ec2"    }
          - { "package_type": "deb", "builder": "aio-x86_64",  "arch": "x86_64", "distro-name": "debian11",      "remote-machine-type": "docker" }
          - { "package_type": "rpm", "builder": "aio-x86_64",  "arch": "x86_64", "distro-name": "centos8",       "remote-machine-type": "docker" }
          - { "package_type": "rpm", "builder": "aio-x86_64",  "arch": "x86_64", "distro-name": "centos7",       "remote-machine-type": "ec2"    }
          - { "package_type": "rpm", "builder": "aio-x86_64",  "arch": "x86_64", "distro-name": "centos6",       "remote-machine-type": "docker" }
          - { "package_type": "rpm", "builder": "aio-x86_64",  "arch": "x86_64", "distro-name": "amazonlinux2",  "remote-machine-type": "ec2"    }
          - { "package_type": "deb", "builder": "aio-aarch64", "arch": "arm64",  "distro-name": "ubuntu1404",    "remote-machine-type": "docker" }
          - { "package_type": "rpm", "builder": "aio-aarch64", "arch": "arm64",  "distro-name": "centos7",       "remote-machine-type": "docker" }
          - { "package_type": "deb", "builder": "non-aio",     "arch": "x86_64", "distro-name": "ubuntu1404",    "remote-machine-type": "docker" }
          - { "package_type": "deb", "builder": "non-aio",     "arch": "x86_64", "distro-name": "ubuntu2204",    "remote-machine-type": "docker" }
          - { "package_type": "rpm", "builder": "non-aio",     "arch": "x86_64", "distro-name": "centos7",       "remote-machine-type": "docker" }
          - { "package_type": "rpm", "builder": "non-aio",     "arch": "x86_64", "distro-name": "amazonlinux2",  "remote-machine-type": "docker" }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2.0.0
        with:
          driver-opts: network=host

      - name: Download built packages.
        uses: actions/download-artifact@v3
        with:
          name:  linux-packages-${{ matrix.test_target.builder }}
          path: /tmp/packages

      - name: Expose GitHub Runtime To Be Able to Use GHA Cache By Docker.
        uses: crazy-max/ghaction-github-runtime@715c25b40ccc0df9b62bfa8be3ccc57d09dbc4b1

      - name: install python and requirements
        uses: ./.github/actions/install_python_and_requirements
        with:
          python_version: ${{ inputs.python_version }}

      - name: Test '${{ matrix.test_target.builder }}' packages
        env:
          AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
          AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
          AWS_PRIVATE_KEY_PATH: "/tmp/private_key.pem"
          AWS_REGION: ${{ inputs.aws_region }}
          CICD_WORKFLOW: ${{ inputs.cicd_workflow }}
          CICD_JOB: ${{ matrix.test_target.builder }}-${{ matrix.test_target.package_type }}-${{ matrix.test_target.distro-name }}
          USE_GHA_CACHE: "1"
          CACHE_VERSION: ${{ inputs.cache_version }}

          SCALYR_API_KEY: ${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE }}
          READ_API_KEY: ${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ }}
          TEST_SESSION_SUFFIX: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
        run: |
          echo "${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}" > "${AWS_PRIVATE_KEY_PATH}"
          chmod 600 "${AWS_PRIVATE_KEY_PATH}"

          python3 tests/end_to_end_tests/managed_packages_tests/remote_machine_tests/run_test_remotely.py \
            tests/end_to_end_tests/managed_packages_tests \
            -s \
            --builder-name ${{ matrix.test_target.builder }} \
            --distro-name ${{ matrix.test_target.distro-name }} \
            --remote-machine-type ${{ matrix.test_target.remote-machine-type }} \
            --package-type ${{ matrix.test_target.package_type }} \
            --packages-source-type dir \
            --packages-source /tmp/packages/${{ matrix.test_target.package_type }}