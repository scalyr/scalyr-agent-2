#!/usr/bin/env bash
# Copyright 2014-2020 Scalyr Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

{% if verbose -%}
set -x
{% endif -%}

echo_with_date() {
    date +"[%Y-%m-%d %H:%M:%S] $*"
}

# Give it some time to finish provisioning process. It's possible that we can SSH in before
# cloud-init fully finished
CLOUD_INIT_RESULT_FILE="/run/cloud-init/result.json"
# We use higher value for rpm due to often timeouts on Amazon Linux 2
MAX_WAIT_COUNTER=50 # we wait a maximum of 50 x 2 seconds for provision to finish

WAIT_COUNTER=0
while [ ! -f "${CLOUD_INIT_RESULT_FILE}" ] && [ ${WAIT_COUNTER} -lt ${MAX_WAIT_COUNTER} ]; do
    echo_with_date "Waiting for cloud init provisioning to complete..."
    ((WAIT_COUNTER=WAIT_COUNTER+1))
    sleep 2
done

if [ ! -f "${CLOUD_INIT_RESULT_FILE}" ]; then
    echo_with_date "Provisioning didn't finish in 60 seconds (file ${CLOUD_INIT_RESULT_FILE} doesn't exist), failing..."
    echo_with_date "/var/log/cloud-init-output.log log file content"
    cat "/var/log/cloud-init-output.log" || true
    exit 1
fi

sleep 5

echo_with_date "==========================="
echo_with_date "System information"
echo_with_date "==========================="

echo_with_date ""
uname -a
echo_with_date ""
cat /etc/*-release
echo_with_date ""
cat /etc/passwd
echo_with_date ""
id
echo_with_date ""
echo_with_date "==========================="

# If it is a centos 8, then change repo source to centos vault.
# That is needed because centos 8 is EOL and its repos are not maintained.
if grep 'PRETTY_NAME="CentOS Linux 8 (Core)"' /etc/os-release; then
  sudo sed 's~mirror.centos.org~vault.centos.org~g'  -i /etc/yum.repos.d/CentOS-Base.repo
  sudo sed 's~mirror.centos.org~vault.centos.org~g'  -i /etc/yum.repos.d/CentOS-AppStream.repo
  sudo sed 's~#baseurl~baseurl~g'  -i /etc/yum.repos.d/CentOS-Base.repo
  sudo sed 's~#baseurl~baseurl~g'  -i /etc/yum.repos.d/CentOS-AppStream.repo
  sudo sed 's~mirrorlist=~#mirrorlist=~g'  -i /etc/yum.repos.d/CentOS-Base.repo
  sudo sed 's~mirrorlist=~#mirrorlist=~g'  -i /etc/yum.repos.d/CentOS-AppStream.repo
fi

sudo yum install -y wget iptables-services
sudo yum install -y "{{python_package}}"

# Install any optional additional packages
{% if additional_packages -%}
sudo yum install -y {{additional_packages}}
{% endif -%}

# Deny the default gpg port to test the install script.
sudo iptables -A OUTPUT -p tcp --dport 11371 -j DROP

# Install Sclayr agent.
echo_with_date ""
echo_with_date "Installing Scalyr agent"
echo_with_date "Using package: {{ install_package["source"] }}"
echo_with_date ""

{% if install_package["type"] in ("file", "url") -%}
{# type of the package is 'file' or 'url', that means that file
should be uploaded by script or already uploaded by Libloud. #}
    {% if install_package["type"] == "url" -%}
    wget -O install_package.rpm "{{ install_package["source"] }}"
    {% elif install_package["type"] == "file" -%}
    {# file should be already uploaded by Libcloud, so just pass this. #}
    {% endif -%}

{% with package_file="install_package.rpm" %}
{% include "partial/verify_rpm_files_ownership.sh.j2" %}
{% endwith %}

# install Scalyr agent from package file.
sudo rpm -ivv install_package.rpm
sudo sed -i 's/REPLACE_THIS/{{scalyr_api_key}}/' /etc/scalyr-agent-2/agent.json
export INSTALL_PACKAGE_VERSION=$(rpm -qp --queryformat '%{VERSION}\n' "install_package.rpm" | sed "s/_.*//g")
{% else -%}
    {# install Scalyr agent by downloading convenience script. #}
    {% if installer_script_info["type"] == "url" -%}
wget -O "install-scalyr-agent-2.sh" -q "{{installer_script_info["source"]}}"
    {# If source points to https://www.scalyr.com/scalyr-repo/stable/latest/install-scalyr-agent-2.sh #}
    {# ensure the script contains correct reference to prod. #}
    {# In the past, we had a bug where incorrect version of the script which pointed to internal instead #}
    {# of stable was published  #}
    {% if installer_script_info["source"] == "https://www.scalyr.com/scalyr-repo/stable/latest/install-scalyr-agent-2.sh" or "stable/latest/install-scalyr-agent-2.sh" in url -%}
echo_with_date ""
echo_with_date "Verifying stable installer script content"
echo_with_date ""

cat -v install-scalyr-agent-2.sh | grep "REPOSITORY_URL"
cat -v install-scalyr-agent-2.sh | grep "baseurl"

cat -v install-scalyr-agent-2.sh | grep "REPOSITORY_URL" | grep "stable"
cat -v install-scalyr-agent-2.sh | grep "baseurl" | grep "stable"
echo_with_date ""
    {% endif -%}

    {% endif -%}
sudo bash ./install-scalyr-agent-2.sh --set-api-key "{{scalyr_api_key}}"
    {% if install_package["source"] == "current" -%}
    {# Install the latest agent version in repo. #}
    # Get version of the current package
export INSTALL_PACKAGE_VERSION=$(yum info scalyr-agent-2 | grep Version | awk '{print $3}')
    {% else -%}
    {# Install particular agent version from repo. #}
# Install older package.
sudo yum downgrade -y "scalyr-agent-2-{{install_package["source"]}}"
export INSTALL_PACKAGE_VERSION="{{install_package["source"]}}"
    {% endif -%}
{% endif -%}

# TODO: Also perform agent.json and agent.d permission checks here when fix is
# merged in stable, until then, it will fail with stable.

{% include "partial/restart_agent_and_remove_logs.sh.j2" %}

# Run some basic sanity checks
echo_with_date ""
echo_with_date "Verifying agent status output"
echo_with_date ""
sudo scalyr-agent-2 status -v
echo_with_date ""

sudo scalyr-agent-2 status -v | grep "${INSTALL_PACKAGE_VERSION}"
sudo scalyr-agent-2 status -v | grep agent.log
sudo scalyr-agent-2 status -v | grep linux_system_metrics
sudo scalyr-agent-2 status -v | grep linux_process_metrics

# Verify build_info file with build metadata is present
echo_with_date ""
echo_with_date "Verifying install_info.json file exists"
cat /usr/share/scalyr-agent-2/py/scalyr_agent/install_info.json || (echo_with_date "install_info.json file is missing" ; exit 1)
echo_with_date ""

# Verify rc*.d symlinks are in place
echo_with_date ""
echo_with_date "Verifying rc.d symlinks exist"
echo_with_date ""
ls -la /etc/rc*.d/ | grep scalyr-agent
echo_with_date ""
ls -la /etc/rc*.d/ | grep scalyr-agent | wc -l | grep 7

echo_with_date ""
echo_with_date "Verifying agent.log"
echo_with_date ""

# Verify agent start up line
sudo cat /var/log/scalyr-agent-2/agent.log | grep "Starting scalyr agent"

# Ensure CA validation is not disabled with default install
sudo cat /var/log/scalyr-agent-2/agent.log | grep -v "sslverifyoff"
sudo cat /var/log/scalyr-agent-2/agent.log | grep -v "Server certificate validation has been disabled"
echo_with_date ""

{% if test_type == "upgrade" -%}
# Upgrade to new version
{% if upgrade_package["type"] in ("file", "url") -%}
echo_with_date ""
echo_with_date "Upgrading Scalyr agent"
echo_with_date "Using version: {{ upgrade_package["source"] }}"
echo_with_date ""
{# type of the package is 'file' or 'url', that means that file
should be uploaded by script or already uploaded by Libloud. #}
    {% if upgrade_package["type"] == "url" -%}
wget -O upgrade_package.deb "{{ upgrade_package["source"] }}"
    {% elif upgrade_package["type"] == "file" -%}
    {# file should be already uploaded by Libcloud, so just pass this. #}
    {% endif -%}

{% with package_file="upgrade_package.rpm" %}
{% include "partial/verify_rpm_files_ownership.sh.j2" %}
{% endwith %}

sudo rpm -FUvv upgrade_package.rpm
sudo sed -i 's/REPLACE_THIS/{{scalyr_api_key}}/' /etc/scalyr-agent-2/agent.json
export UPGRADE_PACKAGE_VERSION=$(rpm -qp --queryformat '%{VERSION}\n' "upgrade_package.rpm" | sed "s/_.*//g")
{% else -%}
     {% if upgrade_package["source"] == "current" -%}
     {# Upgrade agent to the latest version in repo. #}
sudo yum upgrade -y scalyr-agent-2
export UPGRADE_PACKAGE_VERSION=$(yum info scalyr-agent-2 | grep Version | awk '{print $3}')
      {% else -%}
      {# Upgrade agent to the particular version #}
sudo yum install -y "scalyr-agent-2-{{upgrade_package["source"]}}"
export UPGRADE_PACKAGE_VERSION="{{upgrade_package["source"]}}"
      {% endif -%}
{% endif -%}

{% if test_type == "upgrade" -%}
{% include "partial/verify_config_permissions.sh.j2" %}
{% endif -%}

{% include "partial/restart_agent_and_remove_logs.sh.j2" %}

# Verify status works and symlinks are in place
echo_with_date ""
echo_with_date "Verifying agent status output"
echo_with_date ""
sudo scalyr-agent-2 status -v
echo_with_date ""

sudo scalyr-agent-2 status -v | grep "${UPGRADE_PACKAGE_VERSION}"
sudo scalyr-agent-2 status -v | grep agent.log
sudo scalyr-agent-2 status -v | grep linux_system_metrics
sudo scalyr-agent-2 status -v | grep linux_process_metrics

# Verify rc*.d symlinks are in place
echo_with_date ""
echo_with_date "Verifying rc.d symlinks exist"
echo_with_date ""
ls -la /etc/rc*.d/ | grep scalyr-agent
echo_with_date ""
ls -la /etc/rc*.d/ | grep scalyr-agent | wc -l | grep 7

echo_with_date ""
echo_with_date "Verifying agent.log"
echo_with_date ""

# Ensure CA validation is not disabled with default install
sudo cat /var/log/scalyr-agent-2/agent.log | grep -v "sslverifyoff"
sudo cat /var/log/scalyr-agent-2/agent.log | grep -v "Server certificate validation has been disabled"
echo_with_date ""
{% endif -%}

{% include "partial/ssl_checks.sh.j2" %}

# Verify --systemd-managed flag
# TODO: Also test on stable once v2.1.19 is out
{% if test_type == "upgrade" and distro_name == "centos8" -%}
{% include "partial/verify_systemd_managed_flag.sh.j2" %}
{% endif -%}
