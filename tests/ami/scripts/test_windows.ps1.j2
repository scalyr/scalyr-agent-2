# Copyright 2014-2020 Scalyr Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This script installs Scalyr agent MSI package for windows.

# Enable strict mode and make sure we fail and exit with non zero on any error
Set-StrictMode -Version 3.0
Set-PSDebug -Strict

$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

{% if verbose -%}
Set-PSDebug -trace 2
{% endif -%}

function GetMSIVersion {
    param (
        [IO.FileInfo] $MSI
    )

    # this function gets version string from .msi package.
    if (!(Test-Path $MSI.FullName)) {
        throw "File '{0}' does not exist" -f $MSI.FullName
    }

    try {
        $windowsInstaller = New-Object -com WindowsInstaller.Installer
        $database = $windowsInstaller.GetType().InvokeMember(
            "OpenDatabase", "InvokeMethod", $Null,
            $windowsInstaller, @($MSI.FullName, 0)
        )

        $q = "SELECT Value FROM Property WHERE Property = 'ProductVersion'"
        $View = $database.GetType().InvokeMember(
            "OpenView", "InvokeMethod", $Null, $database, ($q)
        )

        $View.GetType().InvokeMember("Execute", "InvokeMethod", $Null, $View, $Null)
        $record = $View.GetType().InvokeMember( "Fetch", "InvokeMethod", $Null, $View, $Null )
        $version = $record.GetType().InvokeMember( "StringData", "GetProperty", $Null, $record, 1 )

        $View.GetType().InvokeMember("Close", "InvokeMethod", $Null, $View, $Null)

        return $version
    } catch {
        throw "Failed to get MSI file version: {0}." -f $_
    }
}

$msi_version=GetMSIVersion -MSI .\install_package.msi
# Method returns an object so we need to cast it to a String
$msi_version="$msi_version".Trim()
echo "Retrieved version: $msi_version"

if ($msi_version -eq $null) {
    Throw "Unable to retrieve version from the msi package!"
}

# install scalyr agent and wait until it is done.
Start-Process C:\Windows\System32\msiexec.exe -ArgumentList "/i install_package.msi /quiet /qn" -wait

# replace api_key and serverHost
(Get-Content "C:\Program Files (x86)\Scalyr\config\agent.json") `
    -replace 'REPLACE_THIS', '{{scalyr_api_key}}' |
  Out-File "C:\Program Files (x86)\Scalyr\config\agent.json";

# After string replacement we need to reencode config file without BOM
{% include "partial/reencode_config_without_bom.ps1.j2" %}

$Env:Path += ";C:\Program Files (x86)\Scalyr\bin"

# Backup originl config with the API key since we will reference it multiple times
Copy-Item "C:\Program Files (x86)\Scalyr\config\agent.json" -Destination "C:\Program Files (x86)\Scalyr\config\agent.json.org"

scalyr-agent-2 start;

Start-Sleep 5

# Also verify we can start the agent using the cmd script we provide
echo ""
echo "Verifying agent status via cmdlet"
echo ""

# NOTE: We pipe a character to avoid PAUSE command waiting for the user input at the end
# and hanging
@() | ScalyrShell.cmd status;

if (!$?) {
    throw "Status command via cmdlet failed"
}

if ($LASTEXITCODE -ne 0) { Throw "Status command via cmdlet failed" }

echo ""
echo "cmdlet agent status verified"
echo ""

echo ""
echo "Verifying agent status via native scalyr-agent-2 binary"
echo ""

$status_output=scalyr-agent-2 status -v;
echo $status_output

if ($LASTEXITCODE -ne 0) { Throw "Status command failed" }

Write-Output $status_output

if ("$status_output" -notmatch "$msi_version")   {
    # If there is a an internal build, we need to check version string for the 'windows version' format.
    $version_numbers=$msi_version.Split(".");
    $version_first_part=$version_numbers[0..2] -join "\.";
    $version_second_part=$version_numbers[-1];
    $pattern=$version_first_part.Trim() + "\.[a-zA-Z]+[0-9]+\." + $version_second_part.Trim();
    $pattern=$pattern.Trim()

    if ("$status_output" -notmatch $pattern)
    {
        Throw "Can not find a matching version.";
    }
};

if ("$status_output" -notmatch "agent.log")   { Throw "Can not find agent log." };
if ("$status_output" -notmatch "windows_system_metrics")   { Throw "Can not find windows_system_metrics." };
if ("$status_output" -notmatch "windows_process_metrics")   { Throw "Can not find windows_process_metrics." };

echo ""
echo "native agent status output verified"
echo ""

# Ensure CA validation is not disabled with default install
echo ""
echo "Verifying SSL cert validation is enabled by default"
echo ""

$log_output=type "C:\Program Files (x86)\Scalyr\log\agent.log"

if ("$log_output" -match "sslverifyoff") { Throw "cert validation is disabled" };
if ("$log_output" -match "certificate validation has been disabled") { Throw "cert validation is disabled" };

echo ""
echo "SSL check validation completed"
echo ""

# Verify build_info file exists
echo ""
echo "Verifying build_info file exists"
echo ""

type "C:\Program Files (x86)\Scalyr\bin\build_info"
echo ""

echo ""
echo "build_info validation completed"
echo ""
