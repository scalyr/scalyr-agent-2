# Copyright 2014-2020 Scalyr Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This script installs Scalyr agent MSI package for windows.

# Enable strict mode and make sure we fail and exit with non zero on any error
Set-StrictMode -Version 3.0
Set-PSDebug -Strict

$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

{% if verbose -%}
Set-PSDebug -trace 2
{% endif -%}

function Log-Message {
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true, Position=0)]
        [AllowEmptyString()]
        [string]$LogMessage
    )

    Write-Output ("[{0}] - {1}" -f (Get-Date), $LogMessage)
}

function GetMSIVersion {
    param (
        [IO.FileInfo] $MSI
    )

    # this function gets version string from .msi package.
    if (!(Test-Path $MSI.FullName)) {
        throw "File '{0}' does not exist" -f $MSI.FullName
    }

    try {
        $windowsInstaller = New-Object -com WindowsInstaller.Installer
        $database = $windowsInstaller.GetType().InvokeMember(
            "OpenDatabase", "InvokeMethod", $Null,
            $windowsInstaller, @($MSI.FullName, 0)
        )

        $q = "SELECT Value FROM Property WHERE Property = 'ProductVersion'"
        $View = $database.GetType().InvokeMember(
            "OpenView", "InvokeMethod", $Null, $database, ($q)
        )

        $View.GetType().InvokeMember("Execute", "InvokeMethod", $Null, $View, $Null)
        $record = $View.GetType().InvokeMember( "Fetch", "InvokeMethod", $Null, $View, $Null )
        $version = $record.GetType().InvokeMember( "StringData", "GetProperty", $Null, $record, 1 )

        $View.GetType().InvokeMember("Close", "InvokeMethod", $Null, $View, $Null)

        return $version
    } catch {
        throw "Failed to get MSI file version: {0}." -f $_
    }
}

# Add env.variable to force the Python interpreter to work with unicode. We also make it system-wide to have an effect
# when it is started as a service.
[Environment]::SetEnvironmentVariable("PYTHONUTF8", "1", "Machine")

# Increase service startup timeout for tests
Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control" -Name ServicesPipeTimeout -Value 60000 -Type DWord

$msi_version=GetMSIVersion -MSI .\install_package.msi
# Method returns an object so we need to cast it to a String
$msi_version="$msi_version".Trim()
Log-Message "Retrieved version: $msi_version"

if ($msi_version -eq $null) {
    Throw "Unable to retrieve version from the msi package!"
}

# install scalyr agent and wait until it is done.
Start-Process C:\Windows\System32\msiexec.exe -ArgumentList "/i install_package.msi /quiet /qn" -wait

# Verify agent.json permissions
# NOTE: This check needs to be performed as early as possible after fresh installation before
# other tools modify the config
Log-Message ""
Log-Message "agent.json and agent.d/ config files permissions checks"
Log-Message ""

# NOTE: At this point fix doesn't run automatically post install so we manually invoke the scrupt and verify it works
& "C:\Program Files (x86)\Scalyr\bin\scalyr-agent-2-config" "--fix-config-permissions"

dir "C:\Program Files (x86)\Scalyr\config"
dir "C:\Program Files (x86)\Scalyr\config\agent.d"
dir "C:\Program Files (x86)\Scalyr\config\templates"

$permissions_agent_json=icacls.exe "C:\Program Files (x86)\Scalyr\config\agent.json"
$permissions_agent_d=icacls.exe "C:\Program Files (x86)\Scalyr\config\agent.d"

echo $permissions_agent_json
echo $permissions_agent_d

if ("$permissions_agent_json" -match "User") { Throw "Found permissions grant for Users for agent.json which should not be there!" };
if ("$permissions_agent_json" -match "Users") { Throw "Found permissions grant for Users for agent.json which should not be there!" };
if ("$permissions_agent_d" -match "User") { Throw "Found permissions grant for Users for agent.d which should not be there!" };
if ("$permissions_agent_d" -match "Users") { Throw "Found permissions grant for Users for agent.d which should not be there!" };

if ("$permissions_agent_json" -notmatch "Administrators") { Throw "Missing permission grant for Administrators for agent.json!" };
if ("$permissions_agent_d" -notmatch "Administrators") { Throw "Missing permission grant for Administrators for agent.d!" };

Log-Message ""
Log-Message "agent.json and agent.d/ config files permissions completed successfully"
Log-Message ""

# Copy over agent.json with the API key set up
Copy-Item ".\agent.json" -Destination "C:\Program Files (x86)\Scalyr\config\agent.json"

$Env:Path += ";C:\Program Files (x86)\Scalyr\bin"

scalyr-agent-2 start;

Start-Sleep 5

# Also verify we can start the agent using the cmd script we provide
Log-Message ""
Log-Message "Verifying agent status via cmdlet"
Log-Message ""

# NOTE: We pipe a character to avoid PAUSE command waiting for the user input at the end
# and hanging
@() | ScalyrShell.cmd status;

if (!$?) {
    throw "Status command via cmdlet failed"
}

if ($LASTEXITCODE -ne 0) { Throw "Status command via cmdlet failed" }

Log-Message ""
Log-Message "cmdlet agent status verified"
Log-Message ""

Log-Message ""
Log-Message "Verifying agent status via native scalyr-agent-2 binary"
Log-Message ""

$status_output=scalyr-agent-2 status -v;
echo $status_output

if ($LASTEXITCODE -ne 0) { Throw "Status command failed" }

Write-Output $status_output

if ("$status_output" -notmatch "$msi_version")   {
    # If there is a an internal build, we need to check version string for the 'windows version' format.
    $version_numbers=$msi_version.Split(".");
    $version_first_part=$version_numbers[0..2] -join "\.";
    $version_second_part=$version_numbers[-1];
    $pattern=$version_first_part.Trim() + "\.[a-zA-Z]+[0-9]+\." + $version_second_part.Trim();
    $pattern=$pattern.Trim()

    if ("$status_output" -notmatch $pattern)
    {
        Throw "Can not find a matching version.";
    }
};

if ("$status_output" -notmatch "agent.log")   { Throw "Can not find agent log." };
if ("$status_output" -notmatch "windows_system_metrics")   { Throw "Can not find windows_system_metrics." };
if ("$status_output" -notmatch "windows_process_metrics")   { Throw "Can not find windows_process_metrics." };

Log-Message ""
Log-Message "native agent status output verified"
Log-Message ""


#
# Perform basic Windows Event Log sanity checks
#

Log-Message ""
Log-Message "Performing Windows Event Log monitor checks"
Log-Message ""

Copy-Item ".\agent.json_event_log_monitor" -Destination "C:\Program Files (x86)\Scalyr\config\agent.json"

{% include "partial/restart_agent_and_remove_logs.ps1.j2" %}

# Write mock entry to event log and ensure Scalyr picks it up
New-EventLog –LogName Application –Source “ScalyrAgentTest”
#[system.diagnostics.EventLog]::CreateEventSource("ScalyrAgentTest", "Application")
Write-EventLog -LogName "Application" -Source "ScalyrAgentTest" -EventID 30001 -EntryType Information -Message "Scalyr automated tests event 要讲话要讲话要讲话." -Category 1 -RawData 10,20

Start-Sleep 10

$status_output=scalyr-agent-2 status -v;
echo $status_output

if ("$status_output" -notmatch "windows_event_log_monitor\.log")   { Throw "Can not find windows_event_log_monitor." };
if ("$status_output" -notmatch "windows_event_log_monitor\(\)")   { Throw "Can not find windows_event_log_monitor." };

# Verify event log monitor emitted some events
$event_log_output=type "C:\Program Files (x86)\Scalyr\log\windows_event_log_monitor.log"
echo $event_log_output

if ("$event_log_output" -notmatch "EventLog")   { Throw "Event log monitor didnt emit any events" };
if ("$event_log_output" -notmatch "EventID")   { Throw "Event log monitor didnt emit any events" };
if ("$event_log_output" -notmatch "RecordId")   { Throw "Event log monitor didnt emit any events" };
if ("$event_log_output" -notmatch "Level")   { Throw "Event log monitor didnt emit any events" };

# Verify that the event we inserted exists
if ("$event_log_output" -notmatch "ScalyrAgentTest")   { Throw "Matching event not found in event log" };
# TODO: Find out how to make this powershell script to write event logs with non-ASCII characters.
if ("$event_log_output" -notmatch "Scalyr automated tests event .+")   { Throw "Matching event not found in event log" };

#
# Verify agent start up line
#
Select-String -Path "C:\Program Files (x86)\Scalyr\log\agent.log" -Pattern "Starting scalyr agent"

#
# Ensure CA validation is not disabled with default install
#

Log-Message ""
Log-Message "Verifying SSL cert validation is enabled by default"
Log-Message ""

$log_output=type "C:\Program Files (x86)\Scalyr\log\agent.log"

if ("$log_output" -match "sslverifyoff") { Throw "cert validation is disabled" };
if ("$log_output" -match "certificate validation has been disabled") { Throw "cert validation is disabled" };

Log-Message ""
Log-Message "SSL check validation completed"
Log-Message ""

#
# Certificate and MITM checks below
#

Log-Message ""
Log-Message "Performing certificate validation and MITM checks"
Log-Message ""

Log-Message ""
Log-Message "Peforming invalid ca_cert_path config option checks"
Log-Message ""

Copy-Item ".\agent.json_invalid_ca_cert_path" -Destination "C:\Program Files (x86)\Scalyr\config\agent.json"

{% include "partial/restart_agent_and_remove_logs.ps1.j2" %}

Log-Message ""
Log-Message "Verifying agent.log"
Log-Message ""

$log_output=type "C:\Program Files (x86)\Scalyr\log\agent.log"
echo $log_output

if ("$log_output" -notmatch "ca_cert_path: C:\\invalid\\ca_certs.crt") { Throw "Invalid ca cert path, agent shouldnt have started" };
if ("$log_output" -notmatch "failedAgentMain") { Throw "Invalid ca cert path, agent shouldnt have started" };
if ("$log_output" -notmatch 'Invalid path "C:\\invalid\\ca_certs.crt" specified for the "ca_cert_path"') { Throw "Invalid ca cert path, agent shouldnt have started" };
#if ("$log_output" -notmatch 'Terminating agent, please fix the error and restart the agent') { Throw "Invalid ca cert path, agent shouldnt have started" };

Log-Message ""
Log-Message "agent.log output successfully verified"
Log-Message ""

Log-Message ""
Log-Message "Performing MITM and hostname verification checks"
Log-Message ""

# NOTE: If scalyr.com IP changes, we need to update this here. Sadly querying
# for IP here inside the power shell script is a bit of a PITA...
# dig A agent.scalyr.com
$scalyr_com_ip = (nslookup agent.scalyr.com | Select-String Address | Where-Object LineNumber -eq 5).ToString().Split(' ')[-1]

echo ""
echo "Using agent.scalyr.com IP: $scalyr_com_ip"
echo ""

Copy-Item ".\agent.json_invalid_host_mitm" -Destination "C:\Program Files (x86)\Scalyr\config\agent.json"
"$scalyr_com_ip invalid.mitm.should.fail.test.agent.scalyr.com" | Add-Content "c:\windows\system32\drivers\etc\hosts"
# "$scalyr_com_ip invalid.mitm.should.fail.test.agent.scalyr.com" | Out-File "c:\windows\system32\drivers\etc\hosts" -Append

{% include "partial/restart_agent_and_remove_logs.ps1.j2" %}

Start-Sleep 20

Log-Message ""
Log-Message "Verifying agent status output"
Log-Message ""

$status_output=scalyr-agent-2 status -v;
echo $status_output

$log_output=type "C:\Program Files (x86)\Scalyr\log\agent.log"
echo $log_output

if ("$status_output" -notmatch "Last successful communication with Scalyr: Never") { Throw "Invalid line found." };
if ("$status_output" -notmatch "Bytes uploaded successfully:               0") { Throw "Invalid line found." };
if ("$status_output" -notmatch "Last copy request size:                    0") { Throw "Invalid line found." };
if ("$status_output" -notmatch "Last copy response size:                   0") { Throw "Invalid line found." };
if ("$status_output" -notmatch "Last copy response status:                 client/connectionFailedCertHostnameValidationFailed") { Throw "Invalid line found." };

Log-Message ""
Log-Message "Status output successfully verified."
Log-Message ""

Log-Message ""
Log-Message "Verifying agent logs"
Log-Message ""

$log_output=type "C:\Program Files (x86)\Scalyr\log\agent.log"

if ("$log_output" -notmatch "Failed to connect to") { Throw "Matching log line not found." };
if ("$log_output" -notmatch "because of server certificate validation error") { Throw "Matching log line not found." };
if ("$log_output" -notmatch "This likely indicates a MITM attack") { Throw "Matching log line not found." };

Log-Message ""
Log-Message "agent.log output successfully verified"
Log-Message ""

Log-Message ""
Log-Message "Performing cert signed by CA we dont trust checks"
Log-Message ""

Copy-Item ".\agent.json_win32_invalid_bad_cert" -Destination "C:\Program Files (x86)\Scalyr\config\agent.json"
Copy-Item ".\ca_certs.crt" -Destination "C:\Program Files (x86)\Scalyr\config\ca_certs.crt"

{% include "partial/restart_agent_and_remove_logs.ps1.j2" %}

Log-Message ""
Log-Message "Verifying agent status output"
Log-Message ""

$status_output=scalyr-agent-2 status -v;
echo $status_output

$log_output=type "C:\Program Files (x86)\Scalyr\log\agent.log"
echo $log_output

if ("$status_output" -notmatch "Last successful communication with Scalyr: Never") { Throw "Invalid line found." };
if ("$status_output" -notmatch "Bytes uploaded successfully:               0") { Throw "Invalid line found." };
if ("$status_output" -notmatch "Last copy request size:                    0") { Throw "Invalid line found." };
if ("$status_output" -notmatch "Last copy response size:                   0") { Throw "Invalid line found." };
if ("$status_output" -notmatch "Last copy response status:                 client/connectionFailedSSLError") { Throw "Invalid line found." };

Log-Message ""
Log-Message "Status output successfully verified."
Log-Message ""

Log-Message ""
Log-Message "Verifying agent.log"
Log-Message ""

$log_output=type "C:\Program Files (x86)\Scalyr\log\agent.log"

if ("$log_output" -notmatch "Failed to connect to") { Throw "CA cert validation should have failed" };
if ("$log_output" -notmatch "due to some SSL error") { Throw "CA cert validation should have failed" };
if ("$log_output" -notmatch "certificate verify failed") { Throw "CA cert validation should have failed" };

Log-Message ""
Log-Message "agent.log output successfully verified"
Log-Message ""

Log-Message ""
Log-Message "Performing win32_max_open_fds checks"
Log-Message ""

#
# win32_max_open_fds settings tests below
#
Copy-Item ".\agent.json_win32_max_open_fds_512" -Destination "C:\Program Files (x86)\Scalyr\config\agent.json"

{% include "partial/restart_agent_and_remove_logs.ps1.j2" %}

# Default limit should be 512
Log-Message ""
Log-Message "Verifying agent.log"
Log-Message ""

$log_output=type "C:\Program Files (x86)\Scalyr\log\agent.log"
echo $log_output

if ("$log_output" -notmatch "win32_max_open_fds\(maxstdio\): 512") { Throw "Matching win32_max_open_fds line not found" };

Log-Message ""
Log-Message "agent.log output successfully verified"
Log-Message ""

#
# Verify that monitoring many files (1k) works fine even with a low open FD limit
#
scalyr-agent-2 stop

mkdir c:\logs\

# Create monitored files with mock content
$files_to_create = 1024

Log-Message "Creating initial files..."

For ($i=0; $i -le $files_to_create; $i++) {
    Add-Content c:\logs\test$i.txt.log "initial line"
}

Log-Message "Initial files created, restarting agent..."

{% include "partial/restart_agent_and_remove_logs.ps1.j2" %}

Start-Sleep 5

Log-Message "Writting mock data..."

For ($i=0; $i -le $files_to_create; $i++) {
    "line $i" | Out-File c:\logs\test$i.txt.log -Append
    #Add-Content c:\logs\test$i.txt.log "line $i"
}

Start-Sleep 10

Log-Message ""
Log-Message "Verifying agent status output"
Log-Message ""

$status_output=scalyr-agent-2 status -v;
# We don't print long status output since it sometimes results in connection
# reset by peer on CI.
#echo $status_output

if ("$status_output" -notmatch "test0.txt.log") { Throw "test.txt.log file not found in status output" };
if ("$status_output" -notmatch "test999.txt.log") { Throw "test999.txt.log file not found in status output" };
if ("$status_output" -notmatch "test1024.txt.log") { Throw "test1024.txt.log file not found in status output" };

Log-Message ""
Log-Message "Status output successfully verified."
Log-Message ""

$log_output=type "C:\Program Files (x86)\Scalyr\log\agent.log"

if ("$log_output" -match "errno=24") { Throw "Found errno 24 which shouldnt be there" };

# Clean up / remove all the created log files
Start-Sleep 5
Remove-Item "C:\\logs\*.log"

# Bumping the limit should work
Copy-Item ".\agent.json_win32_max_open_fds_1024" -Destination "C:\Program Files (x86)\Scalyr\config\agent.json"

{% include "partial/restart_agent_and_remove_logs.ps1.j2" %}

Log-Message ""
Log-Message "Verifying agent.log"
Log-Message ""

$log_output=type "C:\Program Files (x86)\Scalyr\log\agent.log"
echo $log_output

if ("$log_output" -notmatch "win32_max_open_fds\(maxstdio\): 1024") { Throw "Matching win32_max_open_fds line not found" };

Log-Message ""
Log-Message "agent.log output successfully verified"
Log-Message ""
