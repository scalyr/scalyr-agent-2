# Copyright 2014 Scalyr Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------
#
#

from __future__ import absolute_import

from io import open

import os
import ssl
import sys
import locale
import platform

import mock
import six

from scalyr_agent import compat
from scalyr_agent import util as scalyr_util
from scalyr_agent.test_base import BaseScalyrLogCaptureTestCase
from scalyr_agent.test_base import ScalyrTestCase
from scalyr_agent.test_base import skipIf
from scalyr_agent.build_info import get_build_revision

__all__ = ["LogCaptureClassTestCase"]


class LogCaptureClassTestCase(BaseScalyrLogCaptureTestCase):
    """
    Test class which verified BaseScalyrLogCaptureTestCase works correctly.
    """

    def test_assertLogFileContainsAndDoesntContainLineRegex(self):
        # Log files should have been created in setUp()
        self.assertTrue(os.path.isfile(self.agent_log_path))
        self.assertTrue(os.path.isfile(self.agent_debug_log_path))

        # Write some data to the file and verify assertLogFileContainsLineRegex works correctly
        with open(self.agent_log_path, "w") as fp:
            fp.write(six.text_type("line 1\nline 2\nline 3"))

        # file_path argument explicitly provided
        self.assertLogFileContainsLineRegex(r"line 1", self.agent_log_path)
        self.assertLogFileContainsLineRegex(r"line 2", self.agent_log_path)
        self.assertLogFileContainsLineRegex(r"line \d+", self.agent_log_path)

        # file_path argument not provided, should default to agent log path
        self.assertLogFileContainsLineRegex(r"line 1")
        self.assertLogFileContainsLineRegex(r"line 2")
        self.assertLogFileContainsLineRegex(r"line \d+")

        self.assertRaises(
            AssertionError,
            self.assertLogFileContainsLineRegex,
            r"line 1\nline 2",
            self.agent_log_path,
        )
        self.assertRaises(
            AssertionError,
            self.assertLogFileContainsLineRegex,
            r"line 4",
            self.agent_log_path,
        )
        self.assertRaises(
            AssertionError,
            self.assertLogFileContainsLineRegex,
            r"line \d+\d+",
            self.agent_log_path,
        )

        self.assertLogFileDoesntContainsLineRegex(
            r"line 1\nline 2", self.agent_log_path
        )
        self.assertLogFileDoesntContainsLineRegex(r"line 4", self.agent_log_path)
        self.assertLogFileDoesntContainsLineRegex(r"line \d+\d+", self.agent_log_path)

    def test_assertLogFileContainsAndDoesntContainRegex(self):
        # Log files should have been created in setUp()
        self.assertTrue(os.path.isfile(self.agent_log_path))
        self.assertTrue(os.path.isfile(self.agent_debug_log_path))

        # Write some data to the file and verify assertLogFileContainsRegex works correctly
        with open(self.agent_log_path, "w") as fp:
            fp.write(six.text_type("line 1\nline 2\nline 3"))

        self.assertLogFileContainsRegex(r"line 1\nline 2", self.agent_log_path)
        self.assertLogFileContainsRegex(r"line 1\nline 2\nline 3", self.agent_log_path)
        self.assertLogFileContainsRegex(
            r"line 1\nline 2\nline \d+", self.agent_log_path
        )

        self.assertRaises(
            AssertionError,
            self.assertLogFileContainsRegex,
            r"line 4",
            self.agent_log_path,
        )
        self.assertRaises(
            AssertionError,
            self.assertLogFileContainsRegex,
            r"line 1\nline 3",
            self.agent_log_path,
        )

        self.assertLogFileDoesntContainsRegex(r"line 4", self.agent_log_path)
        self.assertLogFileDoesntContainsRegex(r"line 1\n line 3", self.agent_log_path)

    @mock.patch("scalyr_agent.test_base.print")
    def tearDown(self, mock_print):
        test_name = self._testMethodName

        # NOTE: We only perform those checks for "test_assertLogFileContainsLineRegex" test to avoid
        # overhead for each test method on this class
        if test_name != "test_assertLogFileContainsAndDoesntContainLineRegex":
            super(LogCaptureClassTestCase, self).tearDown()
            return

        # Verify directory generated by the test is deleted as part of tearDown cleanup
        # if an assertion has not failed and verify no messages with log paths are printed
        self.assertTrue(os.path.isdir(self.logs_directory))

        self.assertEqual(len(mock_print.call_args_list), 0)

        self._BaseScalyrLogCaptureTestCase__assertion_failed = False
        super(LogCaptureClassTestCase, self).tearDown()

        self.assertEqual(len(mock_print.call_args_list), 0)

        # Verify path to the files is printed if the assertion fails
        self._BaseScalyrLogCaptureTestCase__assertion_failed = True
        super(LogCaptureClassTestCase, self).tearDown()

        self.assertEqual(len(mock_print.call_args_list), 2)

        print_message_1 = mock_print.call_args_list[0][0][0]
        print_message_2 = mock_print.call_args_list[1][0][0]

        expected_msg_1 = 'Stored agent log file for test "test_assertLogFile'
        expected_msg_2 = 'Stored agent debug log file for test "test_assertLogFile'

        self.assertTrue(expected_msg_1 in print_message_1)
        self.assertTrue(expected_msg_2 in print_message_2)


class MiscUtilsTestCase(ScalyrTestCase):
    def tearDown(self):
        super(MiscUtilsTestCase, self).tearDown()

        if "LC_ALL" in os.environ:
            del os.environ["LC_ALL"]

    @skipIf(platform.system() == "Darwin", "Skipping Linux Monitor tests on OSX")
    @skipIf(platform.system() == "Windows", "Skipping Linux Monitor tests on Windows")
    def test_get_language_code_coding_and_locale(self):
        locale.setlocale(locale.LC_ALL, "C.UTF-8")

        (
            language_code,
            encoding,
            used_locale,
        ) = scalyr_util.get_language_code_coding_and_locale()

        # NOTE: On some systems UTF-8 is normalized to UTF8 so we ignore "-" in the value
        self.assertTrue(language_code in ["C", "en_US"])
        self.assertEqual(encoding.replace("-", ""), "UTF8")
        self.assertTrue(used_locale.replace("-", "") in ["C.UTF8", "en_US.UTF8"])

        # NOTE: To be able to test other locales we would need to install other locale packages
        os.environ["LC_ALL"] = "invalid"

        (
            language_code,
            encoding,
            used_locale,
        ) = scalyr_util.get_language_code_coding_and_locale()
        self.assertEqual(language_code, "unknown")
        self.assertEqual(encoding, "unknown")
        self.assertEqual(
            used_locale, "unable to retrieve locale: unknown locale: invalid"
        )

        # Empty coding
        os.environ["LC_ALL"] = "C"

        (
            language_code,
            encoding,
            used_locale,
        ) = scalyr_util.get_language_code_coding_and_locale()
        self.assertEqual(language_code, "unknown")
        self.assertEqual(encoding, "unknown")
        self.assertEqual(used_locale, "unable to retrieve locale")

    def test_get_agent_start_up_message(self):
        from scalyr_agent.agent_main import SCALYR_VERSION

        msg = scalyr_util.get_agent_start_up_message()

        python_version_str = sys.version.replace("\n", "")
        build_revision = get_build_revision()
        _, _, locale = scalyr_util.get_language_code_coding_and_locale()
        openssl_version = getattr(ssl, "OPENSSL_VERSION", "unknown")
        lang_env_var = compat.os_environ_unicode.get("LANG", "notset")

        self.assertTrue("Starting scalyr agent..." in msg)
        self.assertTrue("version=%s" % (SCALYR_VERSION) in msg)
        self.assertTrue("Python version=%s" % (python_version_str) in msg)
        self.assertTrue("OpenSSL version=%s" % (openssl_version) in msg)
        self.assertTrue("default fs encoding=%s" % (sys.getfilesystemencoding()) in msg)
        self.assertTrue("revision=%s" % (build_revision) in msg)
        self.assertTrue("locale=%s" % (locale) in msg)
        self.assertTrue("LANG env variable=%s" % (lang_env_var) in msg)
